{

  "footer": {
    "copyright": "版权所有 © 2024 Zhou Hua;",
    "blog": "博客",
    "donate": "捐赠"
  },
  "player": {
    "title": "Waveform Player",
    "description": "一个功能强大的音频播放器解决方案",
    "readDocs": "文档",
    "viewRepo": "GitHub",
    "react": "为 React 而打造",
    "nav": {
      "docs": "文档",
      "examples": "示例",
      "github": "GitHub"
    },
    "docs": {
      "pages": {
        "introduction": {
          "title": "介绍",
          "description": "Waveform Player 是一个功能强大的音频播放器解决方案，它提供了一系列可组合的组件和工具，帮助你快速构建自定义的音频播放器。无论是简单的音频播放，还是复杂的音乐播放器，都能轻松实现。",
          "features": {
            "title": "功能特点",
            "waveform": "波形可视化",
            "waveform_desc": "支持多种波形渲染模式，包括条形图、镜像、线条、波浪和包络线。每种模式都经过精心设计，能够清晰地展示音频的波形和能量分布。",
            "primitives": "原子组件",
            "primitives_desc": "提供一系列可组合的原子组件，包括播放控制、波形图、时间轴等。每个组件都是独立的，可以自由组合，打造你想要的播放器界面。",
            "hooks": "React Hooks",
            "hooks_desc": "提供强大而灵活的 React Hooks，让你能够轻松控制音频播放、获取播放状态，甚至实现全局播放控制。所有的 Hooks 都经过类型检查，使用起来更加安心。",
            "customization": "样式定制",
            "customization_desc": "通过 classes 和 styles 参数，你可以自定义播放器的每一个部分。支持 Tailwind CSS，让样式定制变得更加简单。",
            "typescript": "TypeScript 支持",
            "typescript_desc": "使用 TypeScript 编写，提供完整的类型定义。IDE 智能提示让你的开发更加顺畅，减少错误发生的可能。",
            "global": "全局控制",
            "global_desc": "内置全局音频管理器，可以轻松实现多个播放器的互斥播放、全局暂停等功能。再也不用担心多个音频同时播放的问题。"
          },
          "installation": {
            "title": "安装",
            "description": "Waveform Player 可以通过 npm、yarn 或 pnpm 安装。选择你喜欢的包管理器，只需一行命令就能开始使用。"
          },
          "quickstart": {
            "title": "快速开始",
            "description": "Waveform Player 提供了多种使用方式，从最简单的 Player 组件到灵活的 Hooks API，都能满足你的需求。让我们看看几种常见的使用方式：",
            "basic": {
              "description": "使用 Player 组件是最简单的方式。它提供了一个完整的音频播放器界面，包含播放控制、波形图、时间显示等功能。你只需要提供音频文件的 URL，其他的交给我们。"
            }
          },
          "next": {
            "title": "下一步",
            "description": "现在你已经了解了 Waveform Player 的基础用法，接下来可以深入了解更多功能：",
            "player_title": "Player 组件",
            "player_desc": "了解 Player 组件的所有功能和配置选项，包括事件处理、样式定制等。",
            "primitives_title": "原子组件",
            "primitives_desc": "探索可组合的原子组件，学习如何构建自定义的播放器界面。",
            "hooks_title": "Hooks API",
            "hooks_desc": "深入了解 React Hooks，掌握音频播放控制和状态管理的精髓。"
          }
        },
        "player": {
          "title": "Player 组件",
          "description": "Player 组件是一个功能完整的音频播放器，它包含了波形可视化、播放控制、音量控制等功能。",
          "basic": {
            "title": "基础使用",
            "description": "Player 组件提供了丰富的功能选项，你可以通过属性来控制显示哪些功能。",
            "preview": {
              "title": "基础示例",
              "description": "展示了 Player 组件的基本功能，包括波形显示、播放控制、时间显示、音量控制和播放速率控制。"
            }
          },
          "anatomy": {
            "title": "组件结构",
            "description": "Player 组件由多个部分组成，每个部分都可以通过 props 进行控制和样式定制。",
            "preview": {
              "title": "组件结构示例",
              "description": "展示了 Player 组件的各个部分及其对应的功能区域。"
            }
          },
          "events": {
            "title": "事件处理",
            "description": "Player 组件提供了丰富的事件回调，你可以通过这些回调来实现自定义的播放行为。",
            "preview": {
              "title": "事件示例",
              "description": "展示了如何使用事件回调来实现音频播放结束后自动重新播放的功能。"
            }
          },
          "mutualExclusive": {
            "title": "互斥播放",
            "description": "通过设置 mutualExclusive 属性，可以实现多个播放器之间的互斥播放。",
            "preview": {
              "title": "互斥播放示例",
              "description": "展示了两个播放器之间的互斥播放效果，当一个播放器开始播放时，另一个播放器会自动暂停。"
            }
          },
          "api": {
            "title": "API 参考",
            "props": {
              "src": "音频文件的 URL 地址",
              "type": "波形显示类型，可选值：'mirror'（镜像）、'normal'（普通）",
              "classes": "用于自定义组件各部分的 CSS 类名",
              "styles": "用于自定义组件各部分的内联样式",
              "mutualExclusive": "是否启用互斥播放模式",
              "onPlay": "播放开始时的回调函数",
              "onPause": "播放暂停时的回调函数",
              "onTimeUpdate": "播放进度更新时的回调函数",
              "onEnded": "播放结束时的回调函数"
            }
          }
        },
        "hooks": {
          "title": "Hooks",
          "description": "Hooks API 提供了一系列的 React Hooks，让你能够更灵活地控制音频播放。"
        },
        "utils": {
          "title": "工具函数",
          "description": "工具函数提供了一些常用的辅助功能，如时间格式化、音频分析等。"
        },
        "examples": {
          "title": "示例",
          "description": "这里提供了一些常见的使用场景示例，帮助你更好地理解如何使用 Waveform Player。"
        }
      }
    },
    "getStarted": "快速开始",
    "viewExamples": "查看示例",
    "features": {
      "waveform": {
        "title": "多种预设的波型图",
        "description": "支持多种波形渲染模式：条形图、镜像、线条、波浪和包络，满足不同场景需求"
      },
      "theme": {
        "title": "预设暗色主题",
        "description": "内置亮色和暗色主题，支持自定义主题变量，轻松定制个性化的外观"
      },
      "customization": {
        "title": "高度可定制",
        "description": "支持自定义样式、主题、布局和行为，甚至完全自定义成你想要的样子，轻松适配不同的设计需求"
      },
      "primitives": {
        "title": "Primitive 组件",
        "description": "提供底层原子化组件，可以以最小的成本定制播放器的功能和外观"
      },
      "globalControl": {
        "title": "全局控制",
        "description": "提供全局控制 hooks，可以控制页面上所有播放器的状态和行为"
      }
    },
    "home": {
      "darkMode": "黑暗模式",
      "waveform": "波型: {{type}}",
      "uploadAudio": "上传音频",
      "uploadDisclaimer": "上传的音频仅用于展示，不会保存到服务器，不会用于其他用途",
      "installation": {
        "title": "安装方式",
        "description": "使用你喜欢的包管理器安装"
      },
      "codeExample": {
        "title": "代码示例",
        "description": "简单几行代码即可实现功能强大的音频播放器"
      },
      "highlights": {
        "title": "功能亮点",
        "description": "强大而灵活的音频播放器解决方案"
      }
    }
  },
  "recorder": {
    "title": "Waveform Recorder",
    "description": "一个功能强大、自由定制的 React 波形音频录音器组件",
    "getStarted": "快速开始",
    "viewExamples": "查看示例",
    "features": {
      "title": "主要特性",
      "waveform": "波形可视化：实时显示音频波形，支持多种渲染样式",
      "playback": "播放控制：完整的播放控制功能，包括播放、暂停、跳转等",
      "customization": "自定义主题：支持自定义颜色、大小、间距等样式",
      "responsive": "响应式设计：自适应不同屏幕尺寸",
      "typescript": "TypeScript 支持：完整的类型定义",
      "events": "事件回调：丰富的事件回调接口"
    }
  },
  "home": {
    "title": "Waveform Player React",
    "description": "一个功能强大、可定制的 React 波形播放器组件",
    "getStarted": "快速开始",
    "viewExamples": "查看示例",
    "features": {
      "title": "主要特性",
      "waveform": "波形可视化：实时显示音频波形，支持多种渲染样式",
      "playback": "播放控制：完整的播放控制功能，包括播放、暂停、跳转等",
      "customization": "自定义主题：支持自定义颜色、大小、间距等样式",
      "responsive": "响应式设计：自适应不同屏幕尺寸",
      "typescript": "TypeScript 支持：完整的类型定义",
      "events": "事件回调：丰富的事件回调接口"
    }
  },
  "globalControl": {
    "tooltip": {
      "clickToStop": "点击停止所有音频",
      "status": "共有 {{count}} 个播放器，其中 {{playing}} 个音频正在播放"
    }
  },
  "toast": {
    "copySuccess": "代码已复制到剪贴板"
  }
}
