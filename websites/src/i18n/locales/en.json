{
  "footer": {
    "copyright": "Copyright Â© 2024 Zhou Hua",
    "blog": "Blog",
    "donate": "Donate"
  },
  "player": {
    "title": "Waveform Player",
    "description": "A powerful audio player solution",
    "readDocs": "Documentation",
    "viewRepo": "GitHub",
    "react": "Built for React",
    "nav": {
      "docs": "Docs",
      "examples": "Examples",
      "github": "GitHub"
    },
    "docs": {
      "pages": {
        "introduction": {
          "title": "Introduction",
          "description": "Waveform Player is a powerful audio player solution that provides a set of composable components and tools to help you quickly build custom audio players. Whether you need a simple audio player or a complex music player, it's got you covered.",
          "features": {
            "title": "Features",
            "waveform": "Waveform Visualization",
            "waveform_desc": "Multiple waveform rendering modes including bars, mirror, line, wave, and envelope. Each mode is carefully designed to clearly display the audio waveform and energy distribution.",
            "primitives": "Primitive Components",
            "primitives_desc": "A set of composable primitive components including playback controls, waveform, timeline, and more. Each component is independent and can be freely combined to create your desired player interface.",
            "hooks": "React Hooks",
            "hooks_desc": "Powerful and flexible React Hooks that let you easily control audio playback, get playback state, and even implement global playback control. All hooks are type-checked for a safer development experience.",
            "customization": "Style Customization",
            "customization_desc": "Customize every part of the player through classes and styles props. Tailwind CSS support makes styling even easier.",
            "typescript": "TypeScript Support",
            "typescript_desc": "Written in TypeScript with complete type definitions. IDE intellisense makes your development smoother and reduces the possibility of errors.",
            "global": "Global Control",
            "global_desc": "Built-in global audio manager for easy implementation of mutual exclusive playback, global pause, and more. No more worries about multiple audio playing simultaneously."
          },
          "installation": {
            "title": "Installation",
            "description": "Waveform Player can be installed via npm, yarn, or pnpm. Choose your favorite package manager and start using it with just one command."
          },
          "quickstart": {
            "title": "Quick Start",
            "description": "Waveform Player offers multiple ways to use, from the simplest Player component to flexible Hooks API, all to meet your needs. Let's look at some common usage patterns:",
            "basic": {
              "description": "Using the Player component is the simplest way. It provides a complete audio player interface with playback controls, waveform visualization, time display, and more. Just provide the audio file URL and let us handle the rest."
            }
          },
          "next": {
            "title": "Next Steps",
            "description": "Now that you understand the basics of Waveform Player, let's dive deeper into more features:",
            "player_title": "Player Component",
            "player_desc": "Learn about all the features and configuration options of the Player component, including event handling and style customization.",
            "primitives_title": "Primitive Components",
            "primitives_desc": "Explore composable primitive components and learn how to build custom player interfaces.",
            "hooks_title": "Hooks API",
            "hooks_desc": "Deep dive into React Hooks and master the essence of audio playback control and state management."
          }
        },
        "player": {
          "title": "Player Component",
          "description": "The Player component is a complete audio player component that provides rich features and flexible customization options.",
          "basic": {
            "title": "Basic Usage",
            "description": "The simplest way to use the Player component is to use it directly, which provides a complete audio player interface."
          },
          "anatomy": {
            "title": "Component Structure",
            "description": "The Player component is composed of multiple parts, each of which can be controlled and styled through props.",
            "preview": {
              "title": "Component Structure Example",
              "description": "Shows the Player component's various parts and their corresponding functional areas."
            }
          },
          "events": {
            "title": "Event Handling",
            "description": "The Player component provides rich event callbacks that allow you to monitor and respond to player state changes."
          },
          "mutualExclusive": {
            "title": "Mutual Exclusive Playback",
            "description": "By setting the mutualExclusive prop, you can make multiple players play exclusively, meaning when one player starts playing, other players will automatically pause."
          },
          "api": {
            "title": "API Reference",
            "props": {
              "src": "URL of the audio file",
              "type": "Type of waveform visualization, options: 'bars', 'mirror', 'line', 'wave', 'envelope'",
              "classes": "CSS class names for customizing each part",
              "styles": "Inline styles for customizing each part",
              "mutualExclusive": "Whether to enable mutual exclusive playback",
              "onPlay": "Callback function when playback starts",
              "onPause": "Callback function when playback pauses",
              "onTimeUpdate": "Callback function when playback progress updates",
              "onEnded": "Callback function when playback ends"
            }
          }
        },
        "hooks": {
          "title": "Hooks",
          "description": "The Hooks API provides a set of React Hooks that allow you to control audio playback more flexibly."
        },
        "utils": {
          "title": "Utilities",
          "description": "Utility functions provide common helper functionalities such as time formatting, audio analysis, etc."
        },
        "examples": {
          "title": "Examples",
          "description": "Here are some examples of common use cases to help you better understand how to use Waveform Player."
        }
      }
    },
    "getStarted": "Get Started",
    "viewExamples": "Examples",
    "features": {
      "waveform": {
        "title": "Multiple preset waveforms",
        "description": "Support multiple waveform rendering modes: bar graph, mirror, line, wave, and envelope, to meet different scene needs"
      },
      "theme": {
        "title": "Theme system",
        "description": "Built-in light and dark themes, support custom theme variables, easily customize the appearance"
      },
      "customization": {
        "title": "Highly customizable",
        "description": "Support custom styles, themes, layouts, and behaviors, even fully customizing it to your liking, easily adapting to different design needs"
      },
      "primitives": {
        "title": "Primitive API",
        "description": "Provide low-level atomic components. You can customize the player's functionality and appearance with minimal effort"
      },
      "globalControl": {
        "title": "Global Control",
        "description": "Provide global control hooks, can control the status and behavior of all players on the page"
      }
    },
    "home": {
      "darkMode": "Dark Mode",
      "waveform": "Waveform: {{type}}",
      "uploadAudio": "Upload Audio",
      "uploadDisclaimer": "Uploaded audio is only used for demonstration and will not be saved to the server or used for other purposes",
      "installation": {
        "title": "Installation",
        "description": "Install using your favorite package manager"
      },
      "codeExample": {
        "title": "Code Example",
        "description": "Implement a powerful audio player with just a few lines of code"
      },
      "highlights": {
        "title": "Highlights",
        "description": "A powerful and flexible audio player solution"
      }
    }
  },
  "recorder": {
    "title": "Waveform Recorder",
    "description": "A powerful and customizable React waveform audio recorder component",
    "getStarted": "Get Started",
    "viewExamples": "Examples",
    "features": {
      "title": "Features",
      "waveform": "Waveform Visualization: Real-time audio waveform display with multiple rendering styles",
      "playback": "Playback Control: Complete playback control including play, pause, seek, and more",
      "customization": "Customization: Rich customization options for colors, sizes, spacing, and more",
      "responsive": "Responsive Design: Adapts to different screen sizes",
      "typescript": "TypeScript Support: Complete type definitions",
      "events": "Event Callbacks: Rich event callback interfaces"
    }
  },
  "home": {
    "title": "Waveform Player React",
    "description": "A powerful and customizable React waveform player component",
    "getStarted": "Get Started",
    "viewExamples": "View Examples",
    "features": {
      "title": "Features",
      "waveform": "Waveform Visualization: Real-time audio waveform display with multiple rendering styles",
      "playback": "Playback Control: Complete playback control including play, pause, seek, and more",
      "customization": "Customization: Rich customization options for colors, sizes, spacing, and more",
      "responsive": "Responsive Design: Adapts to different screen sizes",
      "typescript": "TypeScript Support: Complete type definitions",
      "events": "Event Callbacks: Rich event callback interfaces"
    }
  },
  "globalControl": {
    "tooltip": {
      "clickToStop": "Click to stop all audio",
      "status": "There are {{count}} players, {{playing}} of them are playing"
    }
  },
  "toast": {
    "copySuccess": "Code copied to clipboard"
  }
}
