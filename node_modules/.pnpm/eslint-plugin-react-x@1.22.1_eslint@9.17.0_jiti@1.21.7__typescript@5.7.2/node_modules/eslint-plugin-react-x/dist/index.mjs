import { F, O, isString, MutRef, isNullable } from '@eslint-react/eff';
import * as JSX8 from '@eslint-react/jsx';
import { createRuleForPlugin, normalizeSettings, decodeSettings, unsafeReadSettings } from '@eslint-react/shared';
import * as AST11 from '@eslint-react/ast';
import { isForwardRefCall, isThisSetState, isClassComponent, isChildrenCount, isChildrenForEach, isChildrenMap, isChildrenOnly, isChildrenToArray, useComponentCollectorLegacy, isCloneElementCall, isCreateRefCall, isComponentName, isChildrenToArrayCall, useComponentCollector, ERFunctionComponentFlag, ERComponentHint, isDirectValueOfRenderPropertyLoose, isDeclaredInRenderPropLoose, isInsideCreateElementProps, isInsideRenderMethod, ERClassComponentFlag, isFragmentElement, isCreateElementCall, isInitializedFromReact } from '@eslint-react/core';
import { AST_NODE_TYPES } from '@typescript-eslint/types';
import { isMatching, P, match } from 'ts-pattern';
import { compare } from 'compare-versions';
import * as VAR from '@eslint-react/var';
import { getConstrainedTypeAtLocation, isTypeReadonly } from '@typescript-eslint/type-utils';
import { ESLintUtils } from '@typescript-eslint/utils';
import { unionTypeParts, isTrueLiteralType, isFalseLiteralType, isTypeFlagSet } from 'ts-api-utils';
import ts from 'typescript';
import { getTypeImmutability, isUnknown, isImmutable, isReadonlyShallow, isReadonlyDeep } from 'is-immutable-type';

// package.json
var name = "eslint-plugin-react-x";
var version = "1.22.1";
var createRule = createRuleForPlugin("x");

// src/rules/avoid-shorthand-boolean.ts
var RULE_NAME = "avoid-shorthand-boolean";
var RULE_FEATURES = [
  "CHK"
];
var avoid_shorthand_boolean_default = createRule({
  meta: {
    type: "problem",
    docs: {
      description: "disallow using shorthand boolean attributes",
      [Symbol.for("rule_features")]: RULE_FEATURES
    },
    fixable: "code",
    messages: {
      avoidShorthandBoolean: "Avoid using shorthand boolean attribute '{{propName}}'. Use '{{propName}}={true}' instead."
    },
    schema: []
  },
  name: RULE_NAME,
  create(context) {
    function getReportDescriptor(node) {
      return node.value ? O.none() : O.some({
        messageId: "avoidShorthandBoolean",
        node,
        data: {
          propName: JSX8.getPropName(node)
        },
        fix: (fixer) => fixer.insertTextAfter(node.name, `={true}`)
      });
    }
    return {
      JSXAttribute: F.flow(getReportDescriptor, O.map(context.report))
    };
  },
  defaultOptions: []
});

// src/rules/avoid-shorthand-fragment.ts
var RULE_NAME2 = "avoid-shorthand-fragment";
var RULE_FEATURES2 = [
  "CHK"
];
var avoid_shorthand_fragment_default = createRule({
  meta: {
    type: "problem",
    docs: {
      description: "disallow using shorthand fragment syntax",
      [Symbol.for("rule_features")]: RULE_FEATURES2
    },
    messages: {
      avoidShorthandFragment: "Avoid using shorthand fragment syntax. Use 'Fragment' component instead."
    },
    schema: []
  },
  name: RULE_NAME2,
  create(context) {
    return {
      JSXFragment(node) {
        context.report({
          messageId: "avoidShorthandFragment",
          node
        });
      }
    };
  },
  defaultOptions: []
});
var RULE_NAME3 = "ensure-forward-ref-using-ref";
var RULE_FEATURES3 = [
  "CHK"
];
var ensure_forward_ref_using_ref_default = createRule({
  meta: {
    type: "problem",
    docs: {
      description: "require a 'ref' parameter to be set when using 'forwardRef'",
      [Symbol.for("rule_features")]: RULE_FEATURES3
    },
    messages: {
      ensureForwardRefUsingRef: "A 'forwardRef' is used with this component but no 'ref' parameter is set."
    },
    schema: []
  },
  name: RULE_NAME3,
  create(context) {
    return {
      CallExpression(node) {
        if (!isForwardRefCall(node, context)) return;
        const [component] = node.arguments;
        if (!component || !AST11.isFunction(component)) return;
        const [_, ref] = component.params;
        if (ref) return;
        context.report({
          messageId: "ensureForwardRefUsingRef",
          node: component
        });
      }
    };
  },
  defaultOptions: []
});
var RULE_NAME4 = "no-access-state-in-setstate";
var RULE_FEATURES4 = [
  "CHK"
];
function getName(node) {
  if (node.type === AST_NODE_TYPES.TSAsExpression) {
    return getName(node.expression);
  }
  if (node.type === AST_NODE_TYPES.Identifier || node.type === AST_NODE_TYPES.PrivateIdentifier) {
    return O.some(node.name);
  }
  if (node.type === AST_NODE_TYPES.Literal) {
    return O.some(String(node.value));
  }
  if (node.type === AST_NODE_TYPES.TemplateLiteral && node.expressions.length === 0) {
    return O.fromNullable(node.quasis[0]?.value.raw);
  }
  return O.none();
}
var no_access_state_in_setstate_default = createRule({
  meta: {
    type: "problem",
    docs: {
      description: "disallow accessing 'this.state' within 'setState'",
      [Symbol.for("rule_features")]: RULE_FEATURES4
    },
    messages: {
      noAccessStateInSetstate: "Do not access 'this.state' within 'setState'. Use the update function instead."
    },
    schema: []
  },
  name: RULE_NAME4,
  create(context) {
    if (!context.sourceCode.text.includes("setState")) return {};
    const classStack = [];
    const methodStack = [];
    const setStateStack = [];
    return {
      CallExpression(node) {
        if (!isThisSetState(node)) return;
        setStateStack.push([node, false]);
      },
      "CallExpression:exit"(node) {
        if (!isThisSetState(node)) return;
        setStateStack.pop();
      },
      ClassDeclaration(node) {
        classStack.push([node, isClassComponent(node)]);
      },
      "ClassDeclaration:exit"() {
        classStack.pop();
      },
      ClassExpression(node) {
        classStack.push([node, isClassComponent(node)]);
      },
      "ClassExpression:exit"() {
        classStack.pop();
      },
      MemberExpression(node) {
        if (!AST11.isThisExpression(node.object)) return;
        const [currClass, isComponent] = classStack.at(-1) ?? [];
        if (!currClass || !isComponent) return;
        const [currMethod, isStatic] = methodStack.at(-1) ?? [];
        if (!currMethod || isStatic) return;
        const [setState, hasThisState] = setStateStack.at(-1) ?? [];
        if (!setState || hasThisState) return;
        if (!O.exists(getName(node.property), (name2) => name2 === "state")) return;
        context.report({ messageId: "noAccessStateInSetstate", node });
      },
      MethodDefinition(node) {
        methodStack.push([node, node.static]);
      },
      "MethodDefinition:exit"() {
        methodStack.pop();
      },
      PropertyDefinition(node) {
        methodStack.push([node, node.static]);
      },
      "PropertyDefinition:exit"() {
        methodStack.pop();
      },
      VariableDeclarator(node) {
        const [currClass, isComponent] = classStack.at(-1) ?? [];
        if (!currClass || !isComponent) return;
        const [currMethod, isStatic] = methodStack.at(-1) ?? [];
        if (!currMethod || isStatic) return;
        const [setState, hasThisState] = setStateStack.at(-1) ?? [];
        if (!setState || hasThisState) return;
        if (!(node.init && AST11.isThisExpression(node.init) && node.id.type === AST_NODE_TYPES.ObjectPattern)) return;
        const hasState = node.id.properties.some((prop) => {
          if (prop.type === AST_NODE_TYPES.Property && AST11.isKeyLiteralLike(prop, prop.key)) {
            return O.exists(getName(prop.key), (name2) => name2 === "state");
          }
          return false;
        });
        if (!hasState) return;
        context.report({ messageId: "noAccessStateInSetstate", node });
      }
    };
  },
  defaultOptions: []
});
var RULE_NAME5 = "no-array-index-key";
var RULE_FEATURES5 = [
  "CHK"
];
var reactChildrenMethod = ["forEach", "map"];
var iteratorFunctionIndexParamPosition = /* @__PURE__ */ new Map([
  ["every", 1],
  ["filter", 1],
  ["find", 1],
  ["findIndex", 1],
  ["findLast", 1],
  ["findLastIndex", 1],
  ["flatMap", 1],
  ["forEach", 1],
  ["map", 1],
  ["reduce", 2],
  ["reduceRight", 2],
  ["some", 1]
]);
var isToStringCall = isMatching({
  type: AST_NODE_TYPES.CallExpression,
  callee: {
    type: AST_NODE_TYPES.MemberExpression,
    property: {
      type: AST_NODE_TYPES.Identifier,
      name: "toString"
    }
  }
});
function isReactChildrenMethod(name2) {
  return reactChildrenMethod.some((method) => method === name2);
}
function isUsingReactChildren(node, context) {
  const settings = unsafeReadSettings(context.settings);
  const { callee } = node;
  if (!("property" in callee) || !("object" in callee) || !("name" in callee.property)) {
    return false;
  }
  if (!isReactChildrenMethod(callee.property.name)) return false;
  const initialScope = context.sourceCode.getScope(node);
  if (callee.object.type === AST_NODE_TYPES.Identifier && callee.object.name === "Children") return true;
  if (callee.object.type === AST_NODE_TYPES.MemberExpression && "name" in callee.object.object) {
    return isInitializedFromReact(callee.object.object.name, initialScope, { ...settings, strictImportCheck: true });
  }
  return false;
}
function getMapIndexParamName(node, context) {
  const { callee } = node;
  if (callee.type !== AST_NODE_TYPES.MemberExpression) return O.none();
  if (callee.property.type !== AST_NODE_TYPES.Identifier) return O.none();
  const { name: name2 } = callee.property;
  if (!iteratorFunctionIndexParamPosition.has(name2)) return O.none();
  const callbackArg = node.arguments[isUsingReactChildren(node, context) ? 1 : 0];
  if (!callbackArg) return O.none();
  if (!AST11.isOneOf([AST_NODE_TYPES.ArrowFunctionExpression, AST_NODE_TYPES.FunctionExpression])(callbackArg)) {
    return O.none();
  }
  const { params } = callbackArg;
  const indexParamPosition = iteratorFunctionIndexParamPosition.get(name2);
  if (isNullable(indexParamPosition)) return O.none();
  if (params.length < indexParamPosition + 1) return O.none();
  const param = params.at(indexParamPosition);
  return param && "name" in param ? O.some(param.name) : O.none();
}
var no_array_index_key_default = createRule({
  meta: {
    type: "problem",
    docs: {
      description: "disallow using Array index as 'key'",
      [Symbol.for("rule_features")]: RULE_FEATURES5
    },
    messages: {
      noArrayIndexKey: "Do not use Array index as 'key'."
    },
    schema: []
  },
  name: RULE_NAME5,
  create(context) {
    const indexParamNames = [];
    function isArrayIndex(node) {
      return node.type === AST_NODE_TYPES.Identifier && indexParamNames.some(O.exists((name2) => name2 === node.name));
    }
    function isCreateOrCloneElementCall(node) {
      return isCreateElementCall(node, context) || isCloneElementCall(node, context);
    }
    function getReportDescriptor(node) {
      if (isArrayIndex(node)) return [{ messageId: "noArrayIndexKey", node }];
      if (AST11.isOneOf([AST_NODE_TYPES.TemplateLiteral, AST_NODE_TYPES.BinaryExpression])(node)) {
        const exps = AST_NODE_TYPES.TemplateLiteral === node.type ? node.expressions : AST11.getIdentifiersFromBinaryExpression(node);
        return exps.reduce((acc, exp) => {
          if (isArrayIndex(exp)) return [...acc, { messageId: "noArrayIndexKey", node: exp }];
          return acc;
        }, []);
      }
      if (isToStringCall(node)) {
        if (!("object" in node.callee && isArrayIndex(node.callee.object))) return [];
        return [{ messageId: "noArrayIndexKey", node: node.callee.object }];
      }
      const isStringCall = isMatching({
        type: AST_NODE_TYPES.CallExpression,
        callee: {
          type: AST_NODE_TYPES.Identifier,
          name: "String"
        }
      }, node);
      if (isStringCall) {
        const [arg] = node.arguments;
        if (arg && isArrayIndex(arg)) return [{ messageId: "noArrayIndexKey", node: arg }];
      }
      return [];
    }
    return {
      CallExpression(node) {
        indexParamNames.push(getMapIndexParamName(node, context));
        if (node.arguments.length === 0) return;
        if (!isCreateOrCloneElementCall(node)) return;
        const [_, props] = node.arguments;
        if (props?.type !== AST_NODE_TYPES.ObjectExpression) return;
        for (const prop of props.properties) {
          if (!isMatching({ key: { name: "key" } })(prop)) continue;
          if (!("value" in prop)) continue;
          const descriptors = getReportDescriptor(prop.value);
          for (const descriptor of descriptors) {
            context.report(descriptor);
          }
        }
      },
      "CallExpression:exit"() {
        indexParamNames.pop();
      },
      JSXAttribute(node) {
        if (node.name.name !== "key") return;
        if (indexParamNames.length === 0) return;
        const { value } = node;
        if (value?.type !== AST_NODE_TYPES.JSXExpressionContainer) return;
        const descriptors = getReportDescriptor(value.expression);
        for (const descriptor of descriptors) {
          context.report(descriptor);
        }
      }
    };
  },
  defaultOptions: []
});
var RULE_NAME6 = "no-children-count";
var RULE_FEATURES6 = [
  "CHK"
];
var no_children_count_default = createRule({
  meta: {
    type: "problem",
    docs: {
      description: "disallow using 'Children.count'",
      [Symbol.for("rule_features")]: RULE_FEATURES6
    },
    messages: {
      noChildrenCount: "Using 'Children.count' is uncommon and can lead to fragile code. Use alternatives instead."
    },
    schema: []
  },
  name: RULE_NAME6,
  create(context) {
    return {
      MemberExpression(node) {
        if (isChildrenCount(node, context)) {
          context.report({
            messageId: "noChildrenCount",
            node: node.property
          });
        }
      }
    };
  },
  defaultOptions: []
});
var RULE_NAME7 = "no-children-for-each";
var RULE_FEATURES7 = [
  "CHK"
];
var no_children_for_each_default = createRule({
  meta: {
    type: "problem",
    docs: {
      description: "disallow using 'Children.forEach'",
      [Symbol.for("rule_features")]: RULE_FEATURES7
    },
    messages: {
      noChildrenForEach: "Using 'Children.forEach' is uncommon and can lead to fragile code. Use alternatives instead."
    },
    schema: []
  },
  name: RULE_NAME7,
  create(context) {
    return {
      MemberExpression(node) {
        if (isChildrenForEach(node, context)) {
          context.report({
            messageId: "noChildrenForEach",
            node: node.property
          });
        }
      }
    };
  },
  defaultOptions: []
});
var RULE_NAME8 = "no-children-map";
var RULE_FEATURES8 = [
  "CHK"
];
var no_children_map_default = createRule({
  meta: {
    type: "problem",
    docs: {
      description: "disallow using 'Children.map'",
      [Symbol.for("rule_features")]: RULE_FEATURES8
    },
    messages: {
      noChildrenMap: "Using 'Children.map' is uncommon and can lead to fragile code. Use alternatives instead."
    },
    schema: []
  },
  name: RULE_NAME8,
  create(context) {
    return {
      MemberExpression(node) {
        if (isChildrenMap(node, context)) {
          context.report({
            messageId: "noChildrenMap",
            node: node.property
          });
        }
      }
    };
  },
  defaultOptions: []
});
var RULE_NAME9 = "no-children-only";
var RULE_FEATURES9 = [
  "CHK"
];
var no_children_only_default = createRule({
  meta: {
    type: "problem",
    docs: {
      description: "disallow using 'Children.only'",
      [Symbol.for("rule_features")]: RULE_FEATURES9
    },
    messages: {
      noChildrenOnly: "Using 'Children.only' is uncommon and can lead to fragile code. Use alternatives instead."
    },
    schema: []
  },
  name: RULE_NAME9,
  create(context) {
    return {
      MemberExpression(node) {
        if (isChildrenOnly(node, context)) {
          context.report({
            messageId: "noChildrenOnly",
            node: node.property
          });
        }
      }
    };
  },
  defaultOptions: []
});
var RULE_NAME10 = "no-children-prop";
var RULE_FEATURES10 = [
  "CHK"
];
var no_children_prop_default = createRule({
  meta: {
    type: "problem",
    docs: {
      description: "disallow passing 'children' as props",
      [Symbol.for("rule_features")]: RULE_FEATURES10
    },
    messages: {
      noChildrenProp: "Do not pass 'children' as props."
    },
    schema: []
  },
  name: RULE_NAME10,
  create(context) {
    return {
      JSXElement(node) {
        const initialScope = context.sourceCode.getScope(node);
        const prop = JSX8.getProp(node.openingElement.attributes, "children", initialScope);
        const reportDescriptor = O.map(prop, (prop2) => ({ messageId: "noChildrenProp", node: prop2 }));
        O.map(reportDescriptor, context.report);
      }
    };
  },
  defaultOptions: []
});
var RULE_NAME11 = "no-children-to-array";
var RULE_FEATURES11 = [
  "CHK"
];
var no_children_to_array_default = createRule({
  meta: {
    type: "problem",
    docs: {
      description: "disallow using 'Children.toArray'",
      [Symbol.for("rule_features")]: RULE_FEATURES11
    },
    messages: {
      noChildrenToArray: "Using 'Children.toArray' is uncommon and can lead to fragile code. Use alternatives instead."
    },
    schema: []
  },
  name: RULE_NAME11,
  create(context) {
    return {
      MemberExpression(node) {
        if (isChildrenToArray(node, context)) {
          context.report({
            messageId: "noChildrenToArray",
            node: node.property
          });
        }
      }
    };
  },
  defaultOptions: []
});
var RULE_NAME12 = "no-class-component";
var RULE_FEATURES12 = [
  "CHK"
];
var isComponentDidCatch = isMatching({
  key: {
    type: AST_NODE_TYPES.Identifier,
    name: "componentDidCatch"
  },
  type: P.union(AST_NODE_TYPES.MethodDefinition, AST_NODE_TYPES.PropertyDefinition),
  static: false
});
var isGetDerivedStateFromError = isMatching({
  key: {
    type: AST_NODE_TYPES.Identifier,
    name: "getDerivedStateFromError"
  },
  type: P.union(AST_NODE_TYPES.MethodDefinition, AST_NODE_TYPES.PropertyDefinition),
  static: true
});
var no_class_component_default = createRule({
  meta: {
    type: "problem",
    docs: {
      description: "disallow using class components",
      [Symbol.for("rule_features")]: RULE_FEATURES12
    },
    messages: {
      noClassComponent: "Do not use class components. Use function components instead."
    },
    schema: []
  },
  name: RULE_NAME12,
  create(context) {
    if (!context.sourceCode.text.includes("Component")) return {};
    const { ctx, listeners } = useComponentCollectorLegacy();
    return {
      ...listeners,
      "Program:exit"(node) {
        const components = ctx.getAllComponents(node);
        for (const { name: name2, node: component } of components.values()) {
          if (component.body.body.some((m) => isComponentDidCatch(m) || isGetDerivedStateFromError(m))) continue;
          context.report({
            messageId: "noClassComponent",
            node: component,
            data: {
              // eslint-disable-next-line eslint-plugin/no-unused-placeholders
              name: O.getOrElse(F.constant("anonymous"))(name2)
            }
          });
        }
      }
    };
  },
  defaultOptions: []
});
var RULE_NAME13 = "no-clone-element";
var RULE_FEATURES13 = [
  "CHK"
];
var no_clone_element_default = createRule({
  meta: {
    type: "problem",
    docs: {
      description: "disallow using 'cloneElement'",
      [Symbol.for("rule_features")]: RULE_FEATURES13
    },
    messages: {
      noCloneElement: "Using 'cloneElement' is uncommon and can lead to fragile code. Use alternatives instead."
    },
    schema: []
  },
  name: RULE_NAME13,
  create(context) {
    return {
      CallExpression(node) {
        if (!isCloneElementCall(node, context)) return;
        context.report({
          messageId: "noCloneElement",
          node
        });
      }
    };
  },
  defaultOptions: []
});
var RULE_NAME14 = "no-comment-textnodes";
var RULE_FEATURES14 = [
  "CHK"
];
var no_comment_textnodes_default = createRule({
  meta: {
    type: "problem",
    docs: {
      description: "disallow comments from being inserted as text nodes",
      [Symbol.for("rule_features")]: RULE_FEATURES14
    },
    messages: {
      noCommentTextnodes: "Possible misused comment in text node. Comments inside children section of tag should be placed inside braces."
    },
    schema: []
  },
  name: RULE_NAME14,
  create(context) {
    function hasCommentLike(node) {
      if (AST11.isOneOf([AST_NODE_TYPES.JSXAttribute, AST_NODE_TYPES.JSXExpressionContainer])(node.parent)) return false;
      const rawValue = context.sourceCode.getText(node);
      return /^\s*\/(?:\/|\*)/mu.test(rawValue);
    }
    const getReportDescriptor = (node) => {
      if (!AST11.isOneOf([AST_NODE_TYPES.JSXElement, AST_NODE_TYPES.JSXFragment])(node.parent)) return O.none();
      if (!hasCommentLike(node)) return O.none();
      if (!node.parent.type.includes("JSX")) return O.none();
      return O.some({
        messageId: "noCommentTextnodes",
        node
      });
    };
    const visitorFunction = F.flow(getReportDescriptor, O.map(context.report), F.constVoid);
    return {
      JSXText: visitorFunction,
      Literal: visitorFunction
    };
  },
  defaultOptions: []
});
var RULE_NAME15 = "no-complex-conditional-rendering";
var RULE_FEATURES15 = [
  "CHK"
];
var no_complex_conditional_rendering_default = createRule({
  meta: {
    type: "problem",
    docs: {
      description: "disallow complex conditional rendering",
      [Symbol.for("rule_features")]: RULE_FEATURES15
    },
    messages: {
      noComplexConditionalRendering: "Avoid complex conditional rendering. Extract the logic into separate elements or components."
    },
    schema: []
  },
  name: RULE_NAME15,
  create(context) {
    function getReportDescriptor(node) {
      const jsxExpContainer = node.parent?.parent;
      if (!AST11.is(AST_NODE_TYPES.JSXExpressionContainer)(jsxExpContainer)) return O.none();
      if (!AST11.isOneOf([AST_NODE_TYPES.JSXElement, AST_NODE_TYPES.JSXFragment])(jsxExpContainer.parent)) {
        return O.none();
      }
      if (!jsxExpContainer.parent.children.includes(jsxExpContainer)) return O.none();
      return O.some({ messageId: "noComplexConditionalRendering", node: jsxExpContainer });
    }
    const visitorFunction = F.flow(getReportDescriptor, O.map(context.report), F.constVoid);
    return {
      "JSXExpressionContainer > ConditionalExpression > ConditionalExpression": visitorFunction,
      "JSXExpressionContainer > ConditionalExpression > LogicalExpression": visitorFunction,
      "JSXExpressionContainer > LogicalExpression > ConditionalExpression": visitorFunction,
      "JSXExpressionContainer > LogicalExpression[operator='&&'] > LogicalExpression[operator='||']": visitorFunction,
      "JSXExpressionContainer > LogicalExpression[operator='||'] > LogicalExpression[operator='&&']": visitorFunction
    };
  },
  defaultOptions: []
});
var RULE_NAME16 = "no-component-will-mount";
var RULE_FEATURES16 = [
  "CHK",
  "MOD"
];
function isComponentWillMount(node) {
  return AST11.isOneOf([AST_NODE_TYPES.MethodDefinition, AST_NODE_TYPES.PropertyDefinition])(node) && node.key.type === AST_NODE_TYPES.Identifier && node.key.name === "componentWillMount";
}
var no_component_will_mount_default = createRule({
  meta: {
    type: "problem",
    docs: {
      description: "disallow using 'componentWillMount'",
      [Symbol.for("rule_features")]: RULE_FEATURES16
    },
    fixable: "code",
    messages: {
      noComponentWillMount: "[Deprecated] Use 'UNSAFE_componentWillMount' instead."
    },
    schema: []
  },
  name: RULE_NAME16,
  create(context) {
    if (!context.sourceCode.text.includes("componentWillMount")) return {};
    const { ctx, listeners } = useComponentCollectorLegacy();
    return {
      ...listeners,
      "Program:exit"(node) {
        const components = ctx.getAllComponents(node);
        for (const { node: component } of components.values()) {
          const { body } = component.body;
          for (const member of body) {
            if (isComponentWillMount(member)) {
              context.report({
                messageId: "noComponentWillMount",
                node: member,
                fix(fixer) {
                  if (!("key" in member)) return null;
                  return fixer.replaceText(member.key, "UNSAFE_componentWillMount");
                }
              });
            }
          }
        }
      }
    };
  },
  defaultOptions: []
});
var RULE_NAME17 = "no-component-will-receive-props";
var RULE_FEATURES17 = [
  "CHK",
  "MOD"
];
function isComponentWillUpdate(node) {
  return AST11.isOneOf([AST_NODE_TYPES.MethodDefinition, AST_NODE_TYPES.PropertyDefinition])(node) && node.key.type === AST_NODE_TYPES.Identifier && node.key.name === "componentWillReceiveProps";
}
var no_component_will_receive_props_default = createRule({
  meta: {
    type: "problem",
    docs: {
      description: "disallow using 'componentWillReceiveProps'",
      [Symbol.for("rule_features")]: RULE_FEATURES17
    },
    fixable: "code",
    messages: {
      noComponentWillReceiveProps: "[Deprecated] Use 'UNSAFE_componentWillReceiveProps' instead."
    },
    schema: []
  },
  name: RULE_NAME17,
  create(context) {
    if (!context.sourceCode.text.includes("componentWillReceiveProps")) return {};
    const { ctx, listeners } = useComponentCollectorLegacy();
    return {
      ...listeners,
      "Program:exit"(node) {
        const components = ctx.getAllComponents(node);
        for (const { node: component } of components.values()) {
          const { body } = component.body;
          for (const member of body) {
            if (isComponentWillUpdate(member)) {
              context.report({
                messageId: "noComponentWillReceiveProps",
                node: member,
                fix(fixer) {
                  if (!("key" in member)) return null;
                  return fixer.replaceText(member.key, "UNSAFE_componentWillReceiveProps");
                }
              });
            }
          }
        }
      }
    };
  },
  defaultOptions: []
});
var RULE_NAME18 = "no-component-will-update";
var RULE_FEATURES18 = [
  "CHK",
  "MOD"
];
function isComponentWillUpdate2(node) {
  return AST11.isOneOf([AST_NODE_TYPES.MethodDefinition, AST_NODE_TYPES.PropertyDefinition])(node) && node.key.type === AST_NODE_TYPES.Identifier && node.key.name === "componentWillUpdate";
}
var no_component_will_update_default = createRule({
  meta: {
    type: "problem",
    docs: {
      description: "disallow using 'componentWillReceiveProps'",
      [Symbol.for("rule_features")]: RULE_FEATURES18
    },
    fixable: "code",
    messages: {
      noComponentWillUpdate: "[Deprecated] Use 'UNSAFE_componentWillUpdate' instead."
    },
    schema: []
  },
  name: RULE_NAME18,
  create(context) {
    if (!context.sourceCode.text.includes("componentWillUpdate")) return {};
    const { ctx, listeners } = useComponentCollectorLegacy();
    return {
      ...listeners,
      "Program:exit"(node) {
        const components = ctx.getAllComponents(node);
        for (const { node: component } of components.values()) {
          const { body } = component.body;
          for (const member of body) {
            if (isComponentWillUpdate2(member)) {
              context.report({
                messageId: "noComponentWillUpdate",
                node: member,
                fix(fixer) {
                  if (!("key" in member)) return null;
                  return fixer.replaceText(member.key, "UNSAFE_componentWillUpdate");
                }
              });
            }
          }
        }
      }
    };
  },
  defaultOptions: []
});
var RULE_NAME19 = "no-context-provider";
var RULE_FEATURES19 = [
  "CHK",
  "MOD"
];
var no_context_provider_default = createRule({
  meta: {
    type: "problem",
    docs: {
      description: "disallow the use of '<Context.Provider>'",
      [Symbol.for("rule_features")]: RULE_FEATURES19
    },
    fixable: "code",
    messages: {
      noContextProvider: "In React 19, you can render '<Context>' as a provider instead of '<Context.Provider>'."
    },
    schema: []
  },
  name: RULE_NAME19,
  create(context) {
    if (!context.sourceCode.text.includes(".Provider")) return {};
    const { version: version2 } = normalizeSettings(decodeSettings(context.settings));
    if (compare(version2, "19.0.0", "<")) return {};
    return {
      JSXElement(node) {
        const elementName = JSX8.getElementName(node.openingElement);
        if (!elementName.endsWith(".Provider")) return;
        context.report({
          messageId: "noContextProvider",
          node,
          fix(fixer) {
            const providerName = elementName.replace(/\.Provider$/, "");
            const openingElement = node.openingElement;
            const closingElement = node.closingElement;
            if (!closingElement) return fixer.replaceText(openingElement.name, providerName);
            return [
              fixer.replaceText(openingElement.name, providerName),
              fixer.replaceText(closingElement.name, providerName)
            ];
          }
        });
      }
    };
  },
  defaultOptions: []
});
var RULE_NAME20 = "no-create-ref";
var RULE_FEATURES20 = [
  "CHK"
];
var no_create_ref_default = createRule({
  meta: {
    type: "problem",
    docs: {
      description: "disallow using 'createRef' in function components",
      [Symbol.for("rule_features")]: RULE_FEATURES20
    },
    messages: {
      noCreateRef: "[Deprecated] Use 'useRef' instead."
    },
    schema: []
  },
  name: RULE_NAME20,
  create(context) {
    return {
      CallExpression(node) {
        if (!isCreateRefCall(node, context)) return;
        if (O.isSome(AST11.traverseUp(node, isClassComponent))) return;
        context.report({ messageId: "noCreateRef", node });
      }
    };
  },
  defaultOptions: []
});
var RULE_NAME21 = "no-default-props";
var RULE_FEATURES21 = [
  "CHK"
];
var no_default_props_default = createRule({
  meta: {
    type: "problem",
    docs: {
      description: "disallow using 'defaultProps' property in components",
      [Symbol.for("rule_features")]: RULE_FEATURES21
    },
    messages: {
      noDefaultProps: "[Deprecated] Use ES6 default parameters instead."
    },
    schema: []
  },
  name: RULE_NAME21,
  create(context) {
    if (!context.sourceCode.text.includes("defaultProps")) return {};
    return {
      AssignmentExpression(node) {
        if (node.operator !== "=" || node.left.type !== AST_NODE_TYPES.MemberExpression) return;
        const { object, property } = node.left;
        if (object.type !== AST_NODE_TYPES.Identifier) return;
        if (property.type !== AST_NODE_TYPES.Identifier || property.name !== "defaultProps") return;
        if (!isComponentName(object.name)) return;
        const isComponent = F.pipe(
          VAR.findVariable(object.name, context.sourceCode.getScope(node)),
          O.flatMap(VAR.getVariableNode(0)),
          O.exists((n) => AST11.isFunction(n) || isClassComponent(n))
        );
        if (!isComponent) return;
        context.report({ messageId: "noDefaultProps", node: property });
      },
      PropertyDefinition(node) {
        if (!isClassComponent(node.parent.parent)) return;
        if (!node.static || node.key.type !== AST_NODE_TYPES.Identifier || node.key.name !== "defaultProps") return;
        context.report({ messageId: "noDefaultProps", node });
      }
    };
  },
  defaultOptions: []
});
var RULE_NAME22 = "no-direct-mutation-state";
var RULE_FEATURES22 = [
  "CHK"
];
function getName2(node) {
  if (node.type === AST_NODE_TYPES.TSAsExpression) {
    return getName2(node.expression);
  }
  if (node.type === AST_NODE_TYPES.Identifier || node.type === AST_NODE_TYPES.PrivateIdentifier) {
    return O.some(node.name);
  }
  if (node.type === AST_NODE_TYPES.Literal) {
    return O.some(String(node.value));
  }
  if (node.type === AST_NODE_TYPES.TemplateLiteral && node.expressions.length === 0) {
    return O.fromNullable(node.quasis[0]?.value.raw);
  }
  return O.none();
}
function isAssignmentToThisState(node) {
  const { left } = node;
  return left.type === AST_NODE_TYPES.MemberExpression && AST11.isThisExpression(left.object) && O.exists(getName2(left.property), (name2) => name2 === "state");
}
function isConstructorFunction(node) {
  return AST11.isOneOf([AST_NODE_TYPES.FunctionDeclaration, AST_NODE_TYPES.FunctionExpression])(node) && AST11.isOneOf([AST_NODE_TYPES.MethodDefinition, AST_NODE_TYPES.PropertyDefinition])(node.parent) && node.parent.key.type === AST_NODE_TYPES.Identifier && node.parent.key.name === "constructor";
}
var no_direct_mutation_state_default = createRule({
  meta: {
    type: "problem",
    docs: {
      description: "disallow direct mutation of state",
      [Symbol.for("rule_features")]: RULE_FEATURES22
    },
    messages: {
      noDirectMutationState: "Do not mutate state directly. Use 'setState()' instead."
    },
    schema: []
  },
  name: RULE_NAME22,
  create(context) {
    function getReportDescriptor(node) {
      if (!isAssignmentToThisState(node)) return O.none();
      const maybeParentClass = AST11.traverseUpGuard(
        node,
        AST11.isOneOf([AST_NODE_TYPES.ClassDeclaration, AST_NODE_TYPES.ClassExpression])
      );
      if (O.isNone(maybeParentClass)) return O.none();
      const parentClass = maybeParentClass.value;
      if (!isClassComponent(parentClass)) return O.none();
      const maybeParentConstructor = AST11.traverseUpGuard(node, isConstructorFunction);
      if (O.exists(maybeParentConstructor, (n) => context.sourceCode.getScope(node).block === n)) return O.none();
      return O.some({
        messageId: "noDirectMutationState",
        node
      });
    }
    return {
      AssignmentExpression: F.flow(getReportDescriptor, O.map(context.report))
    };
  },
  defaultOptions: []
});
var RULE_NAME23 = "no-duplicate-jsx-props";
var RULE_FEATURES23 = [
  "CHK"
];
var no_duplicate_jsx_props_default = createRule({
  meta: {
    type: "problem",
    docs: {
      description: "disallow duplicate props",
      [Symbol.for("rule_features")]: RULE_FEATURES23
    },
    messages: {
      noDuplicateJsxProps: "This JSX property is assigned multiple times."
    },
    schema: []
  },
  name: RULE_NAME23,
  create(context) {
    return {
      JSXOpeningElement(node) {
        const props = [];
        for (const attr of node.attributes) {
          if (attr.type === AST_NODE_TYPES.JSXSpreadAttribute) continue;
          const name2 = attr.name.name;
          if (!isString(name2)) continue;
          if (!props.includes(name2)) {
            props.push(name2);
            continue;
          }
          context.report({
            messageId: "noDuplicateJsxProps",
            node: attr
          });
        }
      }
    };
  },
  defaultOptions: []
});
var RULE_NAME24 = "no-duplicate-key";
var RULE_FEATURES24 = [
  "CHK"
];
var no_duplicate_key_default = createRule({
  meta: {
    type: "problem",
    docs: {
      description: "disallow duplicate keys when rendering list",
      [Symbol.for("rule_features")]: RULE_FEATURES24
    },
    messages: {
      noDuplicateKey: "A key must be unique. '{{value}}' is duplicated."
    },
    schema: []
  },
  name: RULE_NAME24,
  create(context) {
    const isWithinChildrenToArrayRef = MutRef.make(false);
    function isKeyEqual(a, b) {
      return VAR.isNodeValueEqual(a, b, [context.sourceCode.getScope(a), context.sourceCode.getScope(b)]);
    }
    function checkIteratorElement(node) {
      if (node.type !== AST_NODE_TYPES.JSXElement) return O.none();
      const initialScope = context.sourceCode.getScope(node);
      return F.pipe(
        JSX8.findPropInAttributes(node.openingElement.attributes, initialScope)("key"),
        O.flatMap((k) => "value" in k ? O.fromNullable(k.value) : O.none()),
        O.flatMap((v) => {
          return isKeyEqual(v, v) ? O.some({
            messageId: "noDuplicateKey",
            node: v,
            data: {
              value: context.sourceCode.getText(v)
            }
          }) : O.none();
        })
      );
    }
    function checkExpression(node) {
      switch (node.type) {
        case AST_NODE_TYPES.ConditionalExpression:
          if (!("consequent" in node)) return O.none();
          return F.pipe(
            checkIteratorElement(node.consequent),
            O.orElse(() => checkIteratorElement(node.alternate))
          );
        case AST_NODE_TYPES.JSXElement:
        case AST_NODE_TYPES.JSXFragment:
          return checkIteratorElement(node);
        case AST_NODE_TYPES.LogicalExpression:
          if (!("left" in node)) return O.none();
          return F.pipe(
            checkIteratorElement(node.left),
            O.orElse(() => checkIteratorElement(node.right))
          );
        default:
          return O.none();
      }
    }
    function checkBlockStatement(node) {
      return AST11.getNestedReturnStatements(node).reduce((acc, statement) => {
        if (!statement.argument) return acc;
        const maybeDescriptor = checkIteratorElement(statement.argument);
        if (O.isNone(maybeDescriptor)) return acc;
        const descriptor = maybeDescriptor.value;
        return [...acc, descriptor];
      }, []);
    }
    const seen = /* @__PURE__ */ new WeakSet();
    return {
      "ArrayExpression, JSXElement > JSXElement"(node) {
        if (MutRef.get(isWithinChildrenToArrayRef)) return;
        const elements = match(node).with({ type: AST_NODE_TYPES.ArrayExpression }, ({ elements: elements2 }) => elements2).with({ type: AST_NODE_TYPES.JSXElement }, ({ parent }) => "children" in parent ? parent.children : []).otherwise(() => []).filter(AST11.is(AST_NODE_TYPES.JSXElement)).filter((element) => !seen.has(element));
        const keys = elements.reduce(
          (acc, element) => {
            const attr = element.openingElement.attributes.findLast((attr2) => {
              if (attr2.type !== AST_NODE_TYPES.JSXAttribute) return false;
              return attr2.name.name === "key";
            });
            if (!attr || !("value" in attr) || attr.value === null) return acc;
            const { value } = attr;
            if (acc.length === 0) return [[element, attr, value]];
            if (acc.some(([_, _1, v]) => isKeyEqual(v, value))) {
              return [...acc, [element, attr, value]];
            }
            return acc;
          },
          []
        );
        if (keys.length < 2) return;
        for (const [element, attr, value] of keys) {
          seen.add(element);
          context.report({
            messageId: "noDuplicateKey",
            node: attr,
            data: {
              value: context.sourceCode.getText(value)
            }
          });
        }
      },
      CallExpression(node) {
        if (isChildrenToArrayCall(node, context)) MutRef.set(isWithinChildrenToArrayRef, true);
        const isMapCall = AST11.isMapCallLoose(node);
        const isArrayFromCall = isMatching({
          type: AST_NODE_TYPES.CallExpression,
          callee: {
            type: AST_NODE_TYPES.MemberExpression,
            property: {
              name: "from"
            }
          }
        }, node);
        if (!isMapCall && !isArrayFromCall) return;
        if (MutRef.get(isWithinChildrenToArrayRef)) return;
        const fn = node.arguments[isMapCall ? 0 : 1];
        if (!AST11.isOneOf([AST_NODE_TYPES.ArrowFunctionExpression, AST_NODE_TYPES.FunctionExpression])(fn)) return;
        if (fn.body.type === AST_NODE_TYPES.BlockStatement) {
          for (const descriptor of checkBlockStatement(fn.body)) {
            context.report(descriptor);
          }
          return;
        }
        O.map(checkExpression(fn.body), context.report);
      },
      "CallExpression:exit"(node) {
        if (isChildrenToArrayCall(node, context)) MutRef.set(isWithinChildrenToArrayRef, false);
      }
    };
  },
  defaultOptions: []
});
var RULE_NAME25 = "no-forward-ref";
var RULE_FEATURES25 = [
  "CHK",
  "MOD"
];
var no_forward_ref_default = createRule({
  meta: {
    type: "problem",
    docs: {
      description: "disallow the use of 'forwardRef'",
      [Symbol.for("rule_features")]: RULE_FEATURES25
    },
    fixable: "code",
    messages: {
      noForwardRef: "In React 19, 'forwardRef' is no longer necessary. Pass 'ref' as a prop instead."
    },
    schema: []
  },
  name: RULE_NAME25,
  create(context) {
    if (!context.sourceCode.text.includes("forwardRef")) return {};
    const { version: version2 } = normalizeSettings(decodeSettings(context.settings));
    if (compare(version2, "19.0.0", "<")) return {};
    return {
      CallExpression(node) {
        if (!isForwardRefCall(node, context)) return;
        context.report({
          messageId: "noForwardRef",
          node,
          fix: getFix(node, context)
        });
      }
    };
  },
  defaultOptions: []
});
function getFix(node, context) {
  return (fixer) => {
    const [componentNode] = node.arguments;
    if (!componentNode || !AST11.isFunction(componentNode)) return [];
    return [
      // unwrap component from forwardRef call
      fixer.removeRange([node.range[0], componentNode.range[0]]),
      fixer.removeRange([componentNode.range[1], node.range[1]]),
      // update component props and ref arguments to match the new signature
      ...getComponentPropsFixes(
        componentNode,
        node.typeArguments?.params ?? [],
        fixer,
        context
      )
    ];
  };
}
function getComponentPropsFixes(node, typeArguments, fixer, context) {
  const getText = (node2) => context.sourceCode.getText(node2);
  const [arg0, arg1] = node.params;
  const [typeArg0, typeArg1] = typeArguments;
  if (!arg0) return [];
  const fixedArg0Text = match(arg0).with({ type: AST_NODE_TYPES.Identifier }, (n) => O.some(`...${n.name}`)).with({ type: AST_NODE_TYPES.ObjectPattern }, (n) => O.some(n.properties.map(getText).join(", "))).otherwise(O.none);
  const fixedArg1Text = match(arg1).with(P.nullish, () => O.some("ref")).with({ type: AST_NODE_TYPES.Identifier, name: "ref" }, () => O.some("ref")).with({ type: AST_NODE_TYPES.Identifier, name: P.not("ref") }, (n) => O.some(`ref: ${n.name}`)).otherwise(O.none);
  if (O.isNone(fixedArg0Text) || O.isNone(fixedArg1Text)) return [];
  const fixedPropsText = fixedArg0Text.value;
  const fixedRefText = fixedArg1Text.value;
  if (!typeArg0 || !typeArg1) {
    return [
      fixer.replaceText(
        arg0,
        [
          "{",
          fixedRefText + ",",
          fixedPropsText,
          "}"
        ].join(" ")
      ),
      ...arg1 ? [fixer.remove(arg1), fixer.removeRange([arg0.range[1], arg1.range[0]])] : []
    ];
  }
  return [
    fixer.replaceText(
      arg0,
      [
        "{",
        fixedRefText + ",",
        fixedPropsText,
        "}:",
        getText(typeArg1),
        "&",
        "{",
        `ref:`,
        `React.RefObject<${getText(typeArg0)}>`,
        "}"
      ].join(" ")
    ),
    ...arg1 ? [fixer.remove(arg1), fixer.removeRange([arg0.range[1], arg1.range[0]])] : []
  ];
}
var RULE_NAME26 = "no-implicit-key";
var RULE_FEATURES26 = [
  "CHK"
];
var no_implicit_key_default = createRule({
  meta: {
    type: "problem",
    docs: {
      description: "disallow implicit 'key' props",
      [Symbol.for("rule_features")]: RULE_FEATURES26
    },
    messages: {
      noImplicitKey: "Do not use implicit 'key' props."
    },
    schema: []
  },
  name: RULE_NAME26,
  create(context) {
    function getReportDescriptor(node) {
      const initialScope = context.sourceCode.getScope(node);
      const keyPropFound = JSX8.findPropInAttributes(node.attributes, initialScope)("key");
      const keyPropOnElement = node.attributes.some(
        (n) => AST11.is(AST_NODE_TYPES.JSXAttribute)(n) && n.name.name === "key"
      );
      if (O.isSome(keyPropFound) && !keyPropOnElement) {
        return O.some({ messageId: "noImplicitKey", node: keyPropFound.value });
      }
      return O.none();
    }
    return {
      JSXOpeningElement: F.flow(getReportDescriptor, O.map(context.report))
    };
  },
  defaultOptions: []
});
var RULE_NAME27 = "no-leaked-conditional-rendering";
var RULE_FEATURES27 = [
  "CHK",
  "TSC"
];
var tsHelpers = {
  isAnyType: (type) => isTypeFlagSet(type, ts.TypeFlags.TypeParameter | ts.TypeFlags.Any),
  isBigIntType: (type) => isTypeFlagSet(type, ts.TypeFlags.BigIntLike),
  isBooleanType: (type) => isTypeFlagSet(type, ts.TypeFlags.BooleanLike),
  isEnumType: (type) => isTypeFlagSet(type, ts.TypeFlags.EnumLike),
  isFalsyBigIntType: (type) => type.isLiteral() && isMatching({ value: { base10Value: "0" } }, type),
  isFalsyNumberType: (type) => type.isNumberLiteral() && type.value === 0,
  isFalsyStringType: (type) => type.isStringLiteral() && type.value === "",
  isNeverType: (type) => isTypeFlagSet(type, ts.TypeFlags.Never),
  isNullishType: (type) => isTypeFlagSet(
    type,
    ts.TypeFlags.Null | ts.TypeFlags.Undefined | ts.TypeFlags.VoidLike
  ),
  isNumberType: (type) => isTypeFlagSet(type, ts.TypeFlags.NumberLike),
  isObjectType: (type) => !isTypeFlagSet(
    type,
    ts.TypeFlags.Null | ts.TypeFlags.Undefined | ts.TypeFlags.VoidLike | ts.TypeFlags.BooleanLike | ts.TypeFlags.StringLike | ts.TypeFlags.NumberLike | ts.TypeFlags.BigIntLike | ts.TypeFlags.TypeParameter | ts.TypeFlags.Any | ts.TypeFlags.Unknown | ts.TypeFlags.Never
  ),
  isStringType: (type) => isTypeFlagSet(type, ts.TypeFlags.StringLike),
  isTruthyBigIntType: (type) => type.isLiteral() && isMatching({ value: { base10Value: P.not("0") } }, type),
  isTruthyNumberType: (type) => type.isNumberLiteral() && type.value !== 0,
  isTruthyStringType: (type) => type.isStringLiteral() && type.value !== "",
  isUnknownType: (type) => isTypeFlagSet(type, ts.TypeFlags.Unknown)
};
function inspectVariantTypes(types) {
  const variantTypes = /* @__PURE__ */ new Set();
  if (types.some(tsHelpers.isUnknownType)) {
    variantTypes.add("unknown");
    return variantTypes;
  }
  if (types.some(tsHelpers.isNullishType)) {
    variantTypes.add("nullish");
  }
  const booleans = types.filter(tsHelpers.isBooleanType);
  switch (true) {
    case (booleans.length === 1 && !!booleans[0]): {
      const [first] = booleans;
      const evaluated = F.pipe(
        match(first).when(isTrueLiteralType, () => O.some("truthy boolean")).when(isFalseLiteralType, () => O.some("falsy boolean")).otherwise(O.none)
      );
      O.map(evaluated, (v) => variantTypes.add(v));
      break;
    }
    case booleans.length === 2: {
      variantTypes.add("boolean");
      break;
    }
  }
  const strings = types.filter(tsHelpers.isStringType);
  if (strings.length > 0) {
    const evaluated = match(strings).when((types2) => types2.every(tsHelpers.isTruthyStringType), F.constant("truthy string")).when((types2) => types2.every(tsHelpers.isFalsyStringType), F.constant("falsy string")).otherwise(F.constant("string"));
    variantTypes.add(evaluated);
  }
  const bigints = types.filter(tsHelpers.isBigIntType);
  if (bigints.length > 0) {
    const evaluated = match(bigints).when((types2) => types2.every(tsHelpers.isTruthyBigIntType), F.constant("truthy bigint")).when((types2) => types2.every(tsHelpers.isFalsyBigIntType), F.constant("falsy bigint")).otherwise(F.constant("bigint"));
    variantTypes.add(evaluated);
  }
  const numbers = types.filter(tsHelpers.isNumberType);
  if (numbers.length > 0) {
    const evaluated = match(numbers).when((types2) => types2.every(tsHelpers.isTruthyNumberType), F.constant("truthy number")).when((types2) => types2.every(tsHelpers.isFalsyNumberType), F.constant("falsy number")).otherwise(F.constant("number"));
    variantTypes.add(evaluated);
  }
  if (types.some(tsHelpers.isEnumType)) {
    variantTypes.add("enum");
  }
  if (types.some(tsHelpers.isObjectType)) {
    variantTypes.add("object");
  }
  if (types.some(tsHelpers.isAnyType)) {
    variantTypes.add("any");
  }
  if (types.some(tsHelpers.isNeverType)) {
    variantTypes.add("never");
  }
  return variantTypes;
}
function isInitExpression(node) {
  return node.type !== AST_NODE_TYPES.VariableDeclaration;
}
function getVariableInitExpression(at) {
  return (variable) => {
    return F.pipe(
      O.some(variable),
      O.flatMapNullable((v) => v.defs.at(at)),
      O.flatMap(
        (d) => "init" in d.node ? O.fromNullable(d.node.init) : O.none()
      ),
      O.filter(isInitExpression)
    );
  };
}
var no_leaked_conditional_rendering_default = createRule({
  meta: {
    type: "problem",
    docs: {
      description: "disallow problematic leaked values from being rendered",
      [Symbol.for("rule_features")]: RULE_FEATURES27
    },
    messages: {
      noLeakedConditionalRendering: "Potential leaked value {{value}} that might cause unintentionally rendered values or rendering crashes."
    },
    schema: []
  },
  name: RULE_NAME27,
  create(context) {
    if (!context.sourceCode.text.includes("&&") && !context.sourceCode.text.includes("?")) return {};
    const { version: version2 } = normalizeSettings(decodeSettings(context.settings));
    const allowedVariants = [
      "any",
      "boolean",
      "nullish",
      "object",
      "falsy boolean",
      "truthy bigint",
      "truthy boolean",
      "truthy number",
      "truthy string",
      ...compare(version2, "18.0.0", "<") ? [] : ["string", "falsy string"]
    ];
    const services = ESLintUtils.getParserServices(context, false);
    function getReportDescriptor(node) {
      return match(node).when(AST11.isJSX, O.none).with({ type: AST_NODE_TYPES.LogicalExpression, operator: "&&" }, ({ left, right }) => {
        const isLeftUnaryNot = isMatching({ type: AST_NODE_TYPES.UnaryExpression, operator: "!" }, left);
        if (isLeftUnaryNot) return getReportDescriptor(right);
        const initialScope = context.sourceCode.getScope(left);
        const isLeftNan = isMatching({ type: AST_NODE_TYPES.Identifier, name: "NaN" }, left) || O.exists(VAR.getStaticValue(left, initialScope), (v) => v === "NaN");
        if (isLeftNan) {
          return O.some({
            messageId: "noLeakedConditionalRendering",
            node: left,
            data: { value: context.sourceCode.getText(left) }
          });
        }
        const leftType = getConstrainedTypeAtLocation(services, left);
        const leftTypeVariants = inspectVariantTypes(unionTypeParts(leftType));
        const isLeftValid = Array.from(leftTypeVariants.values()).every((type) => allowedVariants.some((allowed) => allowed === type));
        if (isLeftValid) return getReportDescriptor(right);
        return O.some({
          messageId: "noLeakedConditionalRendering",
          node: left,
          data: { value: context.sourceCode.getText(left) }
        });
      }).with({ type: AST_NODE_TYPES.ConditionalExpression }, ({ alternate, consequent }) => {
        return O.orElse(getReportDescriptor(consequent), () => getReportDescriptor(alternate));
      }).with({ type: AST_NODE_TYPES.Identifier }, (n) => {
        return F.pipe(
          VAR.findVariable(n.name, context.sourceCode.getScope(n)),
          O.flatMap(getVariableInitExpression(0)),
          O.flatMap(getReportDescriptor)
        );
      }).otherwise(O.none);
    }
    const visitorFunction = F.flow(getReportDescriptor, O.map(context.report), F.constVoid);
    return {
      "JSXExpressionContainer > ConditionalExpression": visitorFunction,
      "JSXExpressionContainer > LogicalExpression": visitorFunction
    };
  },
  defaultOptions: []
});
var RULE_NAME28 = "no-missing-component-display-name";
var RULE_FEATURES28 = [
  "CHK"
];
var no_missing_component_display_name_default = createRule({
  meta: {
    type: "problem",
    docs: {
      description: "require 'displayName' for 'memo' and 'forwardRef' components",
      [Symbol.for("rule_features")]: RULE_FEATURES28
    },
    messages: {
      noMissingComponentDisplayName: "Add missing 'displayName' for component."
    },
    schema: []
  },
  name: RULE_NAME28,
  create(context) {
    if (!context.sourceCode.text.includes("memo") && !context.sourceCode.text.includes("forwardRef")) return {};
    const { ctx, listeners } = useComponentCollector(context);
    return {
      ...listeners,
      "Program:exit"(node) {
        const components = ctx.getAllComponents(node);
        for (const { node: node2, displayName, flag } of components.values()) {
          const isMemoOrForwardRef = Boolean(flag & ERFunctionComponentFlag.ForwardRef) || Boolean(flag & ERFunctionComponentFlag.Memo);
          if (O.isSome(AST11.getFunctionIdentifier(node2))) continue;
          if (!isMemoOrForwardRef) continue;
          if (O.isNone(displayName)) {
            context.report({
              messageId: "noMissingComponentDisplayName",
              node: node2
            });
          }
        }
      }
    };
  },
  defaultOptions: []
});
var RULE_NAME29 = "no-missing-key";
var RULE_FEATURES29 = [
  "CHK"
];
var no_missing_key_default = createRule({
  meta: {
    type: "problem",
    docs: {
      description: "require 'key' when rendering list",
      [Symbol.for("rule_features")]: RULE_FEATURES29
    },
    messages: {
      noMissingKey: "Missing 'key' for element when rendering list.",
      noMissingKeyWithFragment: "Use fragment component instead of '<>' because it does not support `key`."
    },
    schema: []
  },
  name: RULE_NAME29,
  create(context) {
    const isWithinChildrenToArrayRef = MutRef.make(false);
    function checkIteratorElement(node) {
      switch (node.type) {
        case AST_NODE_TYPES.JSXElement: {
          const initialScope = context.sourceCode.getScope(node);
          if (!JSX8.hasProp(node.openingElement.attributes, "key", initialScope)) {
            return O.some({
              messageId: "noMissingKey",
              node
            });
          }
          return O.none();
        }
        case AST_NODE_TYPES.JSXFragment: {
          return O.some({
            messageId: "noMissingKeyWithFragment",
            node
          });
        }
        default:
          return O.none();
      }
    }
    function checkExpression(node) {
      switch (node.type) {
        case AST_NODE_TYPES.ConditionalExpression:
          if (!("consequent" in node)) return O.none();
          return O.orElse(checkIteratorElement(node.consequent), () => checkIteratorElement(node.alternate));
        case AST_NODE_TYPES.JSXElement:
        case AST_NODE_TYPES.JSXFragment:
          return checkIteratorElement(node);
        case AST_NODE_TYPES.LogicalExpression:
          if (!("left" in node)) return O.none();
          return O.orElse(checkIteratorElement(node.left), () => checkIteratorElement(node.right));
        default:
          return O.none();
      }
    }
    function checkBlockStatement(node) {
      return AST11.getNestedReturnStatements(node).reduce((acc, statement) => {
        if (!statement.argument) return acc;
        const maybeDescriptor = checkIteratorElement(statement.argument);
        if (O.isNone(maybeDescriptor)) return acc;
        const descriptor = maybeDescriptor.value;
        return [...acc, descriptor];
      }, []);
    }
    return {
      ArrayExpression(node) {
        if (MutRef.get(isWithinChildrenToArrayRef)) return;
        const elements = node.elements.filter(AST11.is(AST_NODE_TYPES.JSXElement));
        if (elements.length === 0) return;
        const initialScope = context.sourceCode.getScope(node);
        for (const element of elements) {
          if (!JSX8.hasProp(element.openingElement.attributes, "key", initialScope)) {
            context.report({
              messageId: "noMissingKey",
              node: element
            });
          }
        }
      },
      CallExpression(node) {
        if (isChildrenToArrayCall(node, context)) MutRef.set(isWithinChildrenToArrayRef, true);
        const isMapCall = AST11.isMapCallLoose(node);
        const isArrayFromCall = isMatching({
          type: AST_NODE_TYPES.CallExpression,
          callee: {
            type: AST_NODE_TYPES.MemberExpression,
            property: {
              name: "from"
            }
          }
        }, node);
        if (!isMapCall && !isArrayFromCall) return;
        if (MutRef.get(isWithinChildrenToArrayRef)) return;
        const fn = node.arguments[isMapCall ? 0 : 1];
        if (!AST11.isOneOf([AST_NODE_TYPES.ArrowFunctionExpression, AST_NODE_TYPES.FunctionExpression])(fn)) return;
        if (fn.body.type === AST_NODE_TYPES.BlockStatement) {
          for (const descriptor of checkBlockStatement(fn.body)) {
            context.report(descriptor);
          }
          return;
        }
        O.map(checkExpression(fn.body), context.report);
      },
      "CallExpression:exit"(node) {
        if (isChildrenToArrayCall(node, context)) MutRef.set(isWithinChildrenToArrayRef, false);
      },
      JSXFragment(node) {
        if (MutRef.get(isWithinChildrenToArrayRef)) return;
        if (node.parent.type === AST_NODE_TYPES.ArrayExpression) {
          context.report({
            messageId: "noMissingKeyWithFragment",
            node
          });
        }
      }
    };
  },
  defaultOptions: []
});
var RULE_NAME30 = "no-nested-components";
var RULE_FEATURES30 = [
  "CHK"
];
var no_nested_components_default = createRule({
  meta: {
    type: "problem",
    docs: {
      description: "disallow using unstable nested components",
      [Symbol.for("rule_features")]: RULE_FEATURES30
    },
    messages: {
      nestedComponent: "Do not nest components inside other components. Move it to the top level.",
      nestedComponentInProps: "Do not nest components inside props. Move it to the top level or pass it as a prop."
    },
    schema: []
  },
  name: RULE_NAME30,
  create(context) {
    const hint = ERComponentHint.SkipMapCallback | ERComponentHint.SkipNullLiteral | ERComponentHint.SkipUndefinedLiteral | ERComponentHint.SkipBooleanLiteral | ERComponentHint.SkipStringLiteral | ERComponentHint.SkipNumberLiteral | ERComponentHint.StrictLogical | ERComponentHint.StrictConditional;
    const collector = useComponentCollector(context, hint);
    const collectorLegacy = useComponentCollectorLegacy();
    return {
      ...collector.listeners,
      ...collectorLegacy.listeners,
      "Program:exit"(node) {
        const functionComponents = Array.from(collector.ctx.getAllComponents(node).values());
        const classComponents = Array.from(collectorLegacy.ctx.getAllComponents(node).values());
        const isFunctionComponent = (node2) => {
          return AST11.isFunction(node2) && functionComponents.some((component) => component.node === node2);
        };
        const isClassComponent11 = (node2) => {
          return AST11.isClass(node2) && classComponents.some((component) => component.node === node2);
        };
        for (const { name: componentName, node: component } of functionComponents) {
          if (isDirectValueOfRenderPropertyLoose(component)) continue;
          if (O.isNone(componentName)) continue;
          const name2 = componentName.value;
          const isInsideProperty = component.parent.type === AST_NODE_TYPES.Property;
          const isInsideJSXPropValue = component.parent.type === AST_NODE_TYPES.JSXAttribute || O.isSome(JSX8.traverseUpProp(node, (n) => n.value?.type === AST_NODE_TYPES.JSXExpressionContainer));
          if (isInsideJSXPropValue) {
            if (!isDeclaredInRenderPropLoose(component)) {
              context.report({
                messageId: "nestedComponentInProps",
                node: component,
                data: {
                  name: name2
                }
              });
            }
            continue;
          }
          if (isInsideCreateElementProps(component, context)) {
            context.report({
              messageId: "nestedComponentInProps",
              node: component,
              data: {
                name: name2
              }
            });
            continue;
          }
          const maybeParentComponent = AST11.traverseUpGuard(component, isFunctionComponent);
          if (O.isSome(maybeParentComponent) && !isDirectValueOfRenderPropertyLoose(maybeParentComponent.value)) {
            context.report({
              messageId: isInsideProperty ? "nestedComponentInProps" : "nestedComponent",
              node: component,
              data: {
                name: name2
              }
            });
            continue;
          }
          const isInsideClassComponentRenderMethod = isInsideRenderMethod(component);
          if (isInsideClassComponentRenderMethod) {
            context.report({
              messageId: "nestedComponent",
              node: component,
              data: {
                name: name2
              }
            });
          }
        }
        for (const { name: name2, node: component } of classComponents) {
          if (O.isNone(AST11.traverseUp(component, (node2) => isClassComponent11(node2) || isFunctionComponent(node2)))) {
            continue;
          }
          context.report({
            messageId: "nestedComponent",
            node: component,
            data: {
              name: O.getOrElse(() => "unknown")(name2)
            }
          });
        }
      }
    };
  },
  defaultOptions: []
});
var RULE_NAME31 = "no-prop-types";
var RULE_FEATURES31 = [
  "CHK"
];
var no_prop_types_default = createRule({
  meta: {
    type: "problem",
    docs: {
      description: "disallow using 'propTypes' property in components",
      [Symbol.for("rule_features")]: RULE_FEATURES31
    },
    messages: {
      noPropTypes: "[Deprecated] Use TypeScript or another type-checking solution instead."
    },
    schema: []
  },
  name: RULE_NAME31,
  create(context) {
    if (!context.sourceCode.text.includes("propTypes")) return {};
    return {
      AssignmentExpression(node) {
        if (node.operator !== "=" || node.left.type !== AST_NODE_TYPES.MemberExpression) return;
        const { object, property } = node.left;
        if (object.type !== AST_NODE_TYPES.Identifier) return;
        if (property.type !== AST_NODE_TYPES.Identifier || property.name !== "propTypes") return;
        if (!isComponentName(object.name)) return;
        const isComponent = F.pipe(
          VAR.findVariable(object.name, context.sourceCode.getScope(node)),
          O.flatMap(VAR.getVariableNode(0)),
          O.exists((n) => AST11.isFunction(n) || isClassComponent(n))
        );
        if (!isComponent) return;
        context.report({ messageId: "noPropTypes", node: property });
      },
      PropertyDefinition(node) {
        if (!isClassComponent(node.parent.parent)) return;
        if (!node.static || node.key.type !== AST_NODE_TYPES.Identifier || node.key.name !== "propTypes") return;
        context.report({ messageId: "noPropTypes", node });
      }
    };
  },
  defaultOptions: []
});
var RULE_NAME32 = "no-redundant-should-component-update";
var RULE_FEATURES32 = [
  "CHK"
];
function isShouldComponentUpdate(node) {
  return AST11.isOneOf([AST_NODE_TYPES.MethodDefinition, AST_NODE_TYPES.PropertyDefinition])(node) && node.key.type === AST_NODE_TYPES.Identifier && node.key.name === "shouldComponentUpdate";
}
var no_redundant_should_component_update_default = createRule({
  meta: {
    type: "problem",
    docs: {
      description: "disallow using 'shouldComponentUpdate' in class component extends 'React.PureComponent'",
      [Symbol.for("rule_features")]: RULE_FEATURES32
    },
    messages: {
      noRedundantShouldComponentUpdate: "'{{componentName}}' does not need 'shouldComponentUpdate' when extending 'React.PureComponent'."
    },
    schema: []
  },
  name: RULE_NAME32,
  create(context) {
    if (!context.sourceCode.text.includes("shouldComponentUpdate")) return {};
    const { ctx, listeners } = useComponentCollectorLegacy();
    return {
      ...listeners,
      "Program:exit"(node) {
        const components = ctx.getAllComponents(node);
        for (const { name: name2, node: component, flag } of components.values()) {
          if (!(flag & ERClassComponentFlag.PureComponent)) continue;
          const { body } = component.body;
          for (const member of body) {
            if (isShouldComponentUpdate(member)) {
              context.report({
                messageId: "noRedundantShouldComponentUpdate",
                node: member,
                data: {
                  componentName: O.getOrElse(() => "PureComponent")(name2)
                }
              });
            }
          }
        }
      }
    };
  },
  defaultOptions: []
});
var RULE_NAME33 = "no-set-state-in-component-did-mount";
var RULE_FEATURES33 = [
  "CHK"
];
function isComponentDidMount(node) {
  return AST11.isOneOf([AST_NODE_TYPES.MethodDefinition, AST_NODE_TYPES.PropertyDefinition])(node) && node.key.type === AST_NODE_TYPES.Identifier && node.key.name === "componentDidMount";
}
var no_set_state_in_component_did_mount_default = createRule({
  meta: {
    type: "problem",
    docs: {
      description: "disallow using 'setState' in 'componentDidMount'",
      [Symbol.for("rule_features")]: RULE_FEATURES33
    },
    messages: {
      noSetStateInComponentDidMount: "Do not call `this.setState` in `componentDidMount` outside of functions, such as callbacks."
    },
    schema: []
  },
  name: RULE_NAME33,
  create(context) {
    if (!context.sourceCode.text.includes("componentDidMount")) return {};
    function getReportDescriptor(node) {
      if (!isThisSetState(node)) return O.none();
      const maybeParentClass = AST11.traverseUp(
        node,
        AST11.isOneOf([AST_NODE_TYPES.ClassDeclaration, AST_NODE_TYPES.ClassExpression])
      );
      if (O.isNone(maybeParentClass)) return O.none();
      const parentClass = maybeParentClass.value;
      if (!isClassComponent(parentClass)) return O.none();
      const maybeParentMethod = AST11.traverseUp(node, isComponentDidMount);
      if (O.isNone(maybeParentMethod)) return O.none();
      const parentMethod = maybeParentMethod.value;
      if (parentMethod.parent !== parentClass.body) return O.none();
      if (context.sourceCode.getScope(node).upper !== context.sourceCode.getScope(parentMethod)) return O.none();
      return O.some({
        messageId: "noSetStateInComponentDidMount",
        node
      });
    }
    return {
      CallExpression: F.flow(getReportDescriptor, O.map(context.report))
    };
  },
  defaultOptions: []
});
var RULE_NAME34 = "no-set-state-in-component-did-update";
var RULE_FEATURES34 = [
  "CHK"
];
function isComponentDidUpdate(node) {
  return AST11.isOneOf([AST_NODE_TYPES.MethodDefinition, AST_NODE_TYPES.PropertyDefinition])(node) && node.key.type === AST_NODE_TYPES.Identifier && node.key.name === "componentDidUpdate";
}
var no_set_state_in_component_did_update_default = createRule({
  meta: {
    type: "problem",
    docs: {
      description: "disallow using 'setState' in 'componentDidUpdate'",
      [Symbol.for("rule_features")]: RULE_FEATURES34
    },
    messages: {
      noSetStateInComponentDidUpdate: "Do not call `this.setState` in `componentDidUpdate` outside of functions, such as callbacks."
    },
    schema: []
  },
  name: RULE_NAME34,
  create(context) {
    if (!context.sourceCode.text.includes("componentDidUpdate")) return {};
    function getReportDescriptor(node) {
      if (!isThisSetState(node)) return O.none();
      const maybeParentClass = AST11.traverseUp(
        node,
        AST11.isOneOf([AST_NODE_TYPES.ClassDeclaration, AST_NODE_TYPES.ClassExpression])
      );
      if (O.isNone(maybeParentClass)) return O.none();
      const parentClass = maybeParentClass.value;
      if (!isClassComponent(parentClass)) return O.none();
      const maybeParentMethod = AST11.traverseUp(node, isComponentDidUpdate);
      if (O.isNone(maybeParentMethod)) return O.none();
      const parentMethod = maybeParentMethod.value;
      if (parentMethod.parent !== parentClass.body) return O.none();
      if (context.sourceCode.getScope(node).upper !== context.sourceCode.getScope(parentMethod)) return O.none();
      return O.some({
        messageId: "noSetStateInComponentDidUpdate",
        node
      });
    }
    return {
      CallExpression: F.flow(getReportDescriptor, O.map(context.report))
    };
  },
  defaultOptions: []
});
var RULE_NAME35 = "no-set-state-in-component-will-update";
var RULE_FEATURES35 = [
  "CHK"
];
function isComponentWillUpdate3(node) {
  return AST11.isOneOf([AST_NODE_TYPES.MethodDefinition, AST_NODE_TYPES.PropertyDefinition])(node) && node.key.type === AST_NODE_TYPES.Identifier && node.key.name === "componentWillUpdate";
}
var no_set_state_in_component_will_update_default = createRule({
  meta: {
    type: "problem",
    docs: {
      description: "disallow using 'setState' in 'componentWillUpdate'",
      [Symbol.for("rule_features")]: RULE_FEATURES35
    },
    messages: {
      noSetStateInComponentWillUpdate: "Do not call `this.setState` in `componentWillUpdate` outside of functions, such as callbacks."
    },
    schema: []
  },
  name: RULE_NAME35,
  create(context) {
    if (!context.sourceCode.text.includes("componentWillUpdate")) return {};
    function getReportDescriptor(node) {
      if (!isThisSetState(node)) return O.none();
      const maybeParentClass = AST11.traverseUp(
        node,
        AST11.isOneOf([AST_NODE_TYPES.ClassDeclaration, AST_NODE_TYPES.ClassExpression])
      );
      if (O.isNone(maybeParentClass)) return O.none();
      const parentClass = maybeParentClass.value;
      if (!isClassComponent(parentClass)) return O.none();
      const maybeParentMethod = AST11.traverseUp(node, isComponentWillUpdate3);
      if (O.isNone(maybeParentMethod)) return O.none();
      const parentMethod = maybeParentMethod.value;
      if (parentMethod.parent !== parentClass.body) return O.none();
      if (context.sourceCode.getScope(node).upper !== context.sourceCode.getScope(parentMethod)) return O.none();
      return O.some({
        messageId: "noSetStateInComponentWillUpdate",
        node
      });
    }
    return {
      CallExpression: F.flow(getReportDescriptor, O.map(context.report))
    };
  },
  defaultOptions: []
});
var RULE_NAME36 = "no-string-refs";
var RULE_FEATURES36 = [
  "CHK"
];
function containsStringLiteral({ value }) {
  return value?.type === AST_NODE_TYPES.Literal && isString(value.value);
}
function containsStringExpressionContainer({ value }) {
  if (value?.type !== AST_NODE_TYPES.JSXExpressionContainer) return false;
  if (value.expression.type === AST_NODE_TYPES.Literal) return isString(value.expression.value);
  return value.expression.type === AST_NODE_TYPES.TemplateLiteral;
}
var no_string_refs_default = createRule({
  meta: {
    type: "problem",
    docs: {
      description: "disallow using deprecated string refs",
      [Symbol.for("rule_features")]: RULE_FEATURES36
    },
    messages: {
      noStringRefs: "[Deprecated] Use callback refs instead."
    },
    schema: []
  },
  name: RULE_NAME36,
  create(context) {
    return {
      JSXAttribute(node) {
        if (node.name.name !== "ref") return;
        if (containsStringLiteral(node) || containsStringExpressionContainer(node)) {
          context.report({
            messageId: "noStringRefs",
            node
          });
        }
      }
    };
  },
  defaultOptions: []
});
var RULE_NAME37 = "no-unsafe-component-will-mount";
var RULE_FEATURES37 = [
  "CHK"
];
function isUnsafeComponentWillMount(node) {
  return AST11.isOneOf([AST_NODE_TYPES.MethodDefinition, AST_NODE_TYPES.PropertyDefinition])(node) && node.key.type === AST_NODE_TYPES.Identifier && node.key.name === "UNSAFE_componentWillMount";
}
var no_unsafe_component_will_mount_default = createRule({
  meta: {
    type: "problem",
    docs: {
      description: "disallow using 'UNSAFE_componentWillMount'",
      [Symbol.for("rule_features")]: RULE_FEATURES37
    },
    messages: {
      noUnsafeComponentWillMount: "Do not use 'UNSAFE_componentWillMount'."
    },
    schema: []
  },
  name: RULE_NAME37,
  create(context) {
    if (!context.sourceCode.text.includes("UNSAFE_componentWillMount")) return {};
    const { ctx, listeners } = useComponentCollectorLegacy();
    return {
      ...listeners,
      "Program:exit"(node) {
        const components = ctx.getAllComponents(node);
        for (const { node: component } of components.values()) {
          const { body } = component.body;
          for (const member of body) {
            if (isUnsafeComponentWillMount(member)) {
              context.report({
                messageId: "noUnsafeComponentWillMount",
                node: member
              });
            }
          }
        }
      }
    };
  },
  defaultOptions: []
});
var RULE_NAME38 = "no-unsafe-component-will-receive-props";
var RULE_FEATURES38 = [
  "CHK"
];
function isUnsafeComponentWillReceiveProps(node) {
  return AST11.isOneOf([AST_NODE_TYPES.MethodDefinition, AST_NODE_TYPES.PropertyDefinition])(node) && node.key.type === AST_NODE_TYPES.Identifier && node.key.name === "UNSAFE_componentWillReceiveProps";
}
var no_unsafe_component_will_receive_props_default = createRule({
  meta: {
    type: "problem",
    docs: {
      description: "disallow using 'UNSAFE_componentWillReceiveProps'",
      [Symbol.for("rule_features")]: RULE_FEATURES38
    },
    messages: {
      noUnsafeComponentWillReceiveProps: "Do not use 'UNSAFE_componentWillReceiveProps'."
    },
    schema: []
  },
  name: RULE_NAME38,
  create(context) {
    if (!context.sourceCode.text.includes("UNSAFE_componentWillReceiveProps")) return {};
    const { ctx, listeners } = useComponentCollectorLegacy();
    return {
      ...listeners,
      "Program:exit"(node) {
        const components = ctx.getAllComponents(node);
        for (const { node: component } of components.values()) {
          const { body } = component.body;
          for (const member of body) {
            if (isUnsafeComponentWillReceiveProps(member)) {
              context.report({
                messageId: "noUnsafeComponentWillReceiveProps",
                node: member
              });
            }
          }
        }
      }
    };
  },
  defaultOptions: []
});
var RULE_NAME39 = "no-unsafe-component-will-update";
var RULE_FEATURES39 = [
  "CHK"
];
function isUnsafeComponentWillUpdate(node) {
  return AST11.isOneOf([AST_NODE_TYPES.MethodDefinition, AST_NODE_TYPES.PropertyDefinition])(node) && node.key.type === AST_NODE_TYPES.Identifier && node.key.name === "UNSAFE_componentWillUpdate";
}
var no_unsafe_component_will_update_default = createRule({
  meta: {
    type: "problem",
    docs: {
      description: "disallow using 'UNSAFE_componentWillUpdate'",
      [Symbol.for("rule_features")]: RULE_FEATURES39
    },
    messages: {
      noUnsafeComponentWillUpdate: "Do not use 'UNSAFE_componentWillUpdate'."
    },
    schema: []
  },
  name: RULE_NAME39,
  create(context) {
    if (!context.sourceCode.text.includes("UNSAFE_componentWillUpdate")) return {};
    const { ctx, listeners } = useComponentCollectorLegacy();
    return {
      ...listeners,
      "Program:exit"(node) {
        const components = ctx.getAllComponents(node);
        for (const { node: component } of components.values()) {
          const { body } = component.body;
          for (const member of body) {
            if (isUnsafeComponentWillUpdate(member)) {
              context.report({
                messageId: "noUnsafeComponentWillUpdate",
                node: member
              });
            }
          }
        }
      }
    };
  },
  defaultOptions: []
});
var RULE_NAME40 = "no-unstable-context-value";
var RULE_FEATURES40 = [
  "CHK"
];
var no_unstable_context_value_default = createRule({
  meta: {
    type: "problem",
    docs: {
      description: "disallow passing constructed values to context providers",
      [Symbol.for("rule_features")]: RULE_FEATURES40
    },
    messages: {
      noUnstableContextValue: "A/an '{{type}}' passed as the value prop to the context provider should not be constructed. It will change on every render.",
      noUnstableContextValueWithFunction: "A/an '{{type}}' passed as the value prop to the context provider should not be constructed. It will change on every render. Consider wrapping it in a useCallback hook.",
      noUnstableContextValueWithIdentifier: "A/an '{{type}}' passed as the value prop to the context provider should not be constructed. It will change on every render. Consider wrapping it in a useMemo hook."
    },
    schema: []
  },
  name: RULE_NAME40,
  create(context) {
    const { ctx, listeners } = useComponentCollector(context);
    const possibleValueConstructions = /* @__PURE__ */ new Map();
    return {
      ...listeners,
      JSXOpeningElement(node) {
        const openingElementName = node.name;
        if (openingElementName.type !== AST_NODE_TYPES.JSXMemberExpression) return;
        if (openingElementName.property.name !== "Provider") return;
        const maybeJSXValueAttribute = O.fromNullable(
          node.attributes.find((attribute) => {
            return attribute.type === AST_NODE_TYPES.JSXAttribute && attribute.name.name === "value";
          })
        );
        if (O.isNone(maybeJSXValueAttribute) || !("value" in maybeJSXValueAttribute.value)) return;
        const valueNode = maybeJSXValueAttribute.value.value;
        if (valueNode?.type !== AST_NODE_TYPES.JSXExpressionContainer) return;
        const valueExpression = valueNode.expression;
        const initialScope = context.sourceCode.getScope(valueExpression);
        const construction = VAR.inspectConstruction(valueExpression, initialScope);
        if (construction._tag === "None") return;
        O.map(
          ctx.getCurrentFunction(),
          ([_, currentFn]) => possibleValueConstructions.set(currentFn, [
            ...possibleValueConstructions.get(currentFn) ?? [],
            construction
          ])
        );
      },
      "Program:exit"(node) {
        const components = ctx.getAllComponents(node).values();
        for (const { node: component } of components) {
          const constructions = possibleValueConstructions.get(component);
          if (!constructions) continue;
          for (const construction of constructions) {
            if (construction._tag === "None") continue;
            const { node: constructionNode, _tag } = construction;
            const messageId = _tag.startsWith("Function") ? "noUnstableContextValueWithFunction" : "noUnstableContextValueWithIdentifier";
            context.report({
              messageId,
              node: constructionNode,
              data: {
                type: AST11.toReadableNodeType(constructionNode)
              }
            });
          }
        }
      }
    };
  },
  defaultOptions: []
});
var RULE_NAME41 = "no-unstable-default-props";
var RULE_FEATURES41 = [
  "CHK"
];
var no_unstable_default_props_default = createRule({
  meta: {
    type: "problem",
    docs: {
      description: "disallow using unstable value as default param in function component",
      [Symbol.for("rule_features")]: RULE_FEATURES41
    },
    messages: {
      noUnstableDefaultProps: "A/an '{{forbiddenType}}' as default prop. This could lead to potential infinite render loop in React. Use a variable instead of '{{forbiddenType}}'."
    },
    schema: []
  },
  name: RULE_NAME41,
  create(context) {
    const { ctx, listeners } = useComponentCollector(context);
    const possibleDestructuringDeclarators = /* @__PURE__ */ new WeakMap();
    return {
      ...listeners,
      "Program:exit"(node) {
        const components = ctx.getAllComponents(node);
        for (const { node: component } of components.values()) {
          const { params } = component;
          const [props] = params;
          if (!props) continue;
          const properties = match(props).with({ type: AST_NODE_TYPES.ObjectPattern }, ({ properties: properties2 }) => properties2).with({ type: AST_NODE_TYPES.Identifier }, ({ name: name2 }) => {
            const variableDeclarators = possibleDestructuringDeclarators.get(component);
            if (!variableDeclarators) return [];
            const declarators = variableDeclarators.filter((d) => d.init.name === name2);
            return declarators.flatMap((d) => d.id.properties);
          }).otherwise(() => []);
          for (const prop of properties) {
            if (prop.type !== AST_NODE_TYPES.Property || prop.value.type !== AST_NODE_TYPES.AssignmentPattern) continue;
            const { value } = prop;
            const { right } = value;
            const initialScope = context.sourceCode.getScope(value);
            const construction = VAR.inspectConstruction(
              value,
              initialScope,
              VAR.ConstructionHint.StrictCallExpression
            );
            if (construction._tag === "None") continue;
            const forbiddenType = AST11.toReadableNodeType(right);
            context.report({
              messageId: "noUnstableDefaultProps",
              node: right,
              data: {
                forbiddenType
              }
            });
          }
        }
      },
      "VariableDeclarator[id.type='ObjectPattern'][init.type='Identifier']"(node) {
        O.map(
          ctx.getCurrentFunction(),
          ([_, currentFn]) => possibleDestructuringDeclarators.set(currentFn, [
            ...possibleDestructuringDeclarators.get(currentFn) ?? [],
            node
          ])
        );
      }
    };
  },
  defaultOptions: []
});
var RULE_NAME42 = "no-unused-class-component-members";
var RULE_FEATURES42 = [
  "CHK"
];
var LIFECYCLE_METHODS = /* @__PURE__ */ new Set([
  "componentDidCatch",
  "componentDidMount",
  "componentDidUpdate",
  "componentWillMount",
  "componentWillReceiveProps",
  "componentWillUnmount",
  "componentWillUpdate",
  "constructor",
  "getSnapshotBeforeUpdate",
  "render",
  "shouldComponentUpdate",
  "state",
  "UNSAFE_componentWillMount",
  "UNSAFE_componentWillReceiveProps",
  "UNSAFE_componentWillUpdate"
]);
function getName3(node) {
  if (node.type === AST_NODE_TYPES.TSAsExpression) {
    return getName3(node.expression);
  }
  if (node.type === AST_NODE_TYPES.Identifier || node.type === AST_NODE_TYPES.PrivateIdentifier) {
    return O.some(node.name);
  }
  if (node.type === AST_NODE_TYPES.Literal) {
    return O.some(String(node.value));
  }
  if (node.type === AST_NODE_TYPES.TemplateLiteral && node.expressions.length === 0) {
    return O.fromNullable(node.quasis[0]?.value.raw);
  }
  return O.none();
}
var no_unused_class_component_members_default = createRule({
  meta: {
    type: "problem",
    docs: {
      description: "disallow unused class component members",
      [Symbol.for("rule_features")]: RULE_FEATURES42
    },
    messages: {
      noUnusedClassComponentMembers: "Unused method or property '{{methodName}}'' of class '{{className}}'."
    },
    schema: []
  },
  name: RULE_NAME42,
  create(context) {
    const classStack = [];
    const methodStack = [];
    const propertyDefs = /* @__PURE__ */ new WeakMap();
    const propertyUsages = /* @__PURE__ */ new WeakMap();
    function classEnter(node) {
      classStack.push(node);
      if (!isClassComponent(node)) return;
      propertyDefs.set(node, /* @__PURE__ */ new Set());
      propertyUsages.set(node, /* @__PURE__ */ new Set());
    }
    function classExit() {
      const currentClass = classStack.pop();
      if (!currentClass || !isClassComponent(currentClass)) return;
      const className = O.map(AST11.getClassIdentifier(currentClass), (id) => id.name);
      const defs = propertyDefs.get(currentClass);
      const usages = propertyUsages.get(currentClass);
      if (!defs) return;
      for (const def of defs) {
        const name2 = getName3(def);
        if (O.isNone(name2)) continue;
        if (usages?.has(name2.value) || LIFECYCLE_METHODS.has(name2.value)) continue;
        context.report({
          messageId: "noUnusedClassComponentMembers",
          node: def,
          data: {
            className: O.getOrElse(className, () => "Component"),
            methodName: name2.value
          }
        });
      }
    }
    function methodEnter(node) {
      methodStack.push(node);
      const currentClass = classStack.at(-1);
      if (!currentClass || !isClassComponent(currentClass)) return;
      if (node.static) return;
      if (AST11.isKeyLiteralLike(node, node.key)) {
        propertyDefs.get(currentClass)?.add(node.key);
      }
    }
    function methodExit() {
      methodStack.pop();
    }
    return {
      ClassDeclaration: classEnter,
      "ClassDeclaration:exit": classExit,
      ClassExpression: classEnter,
      "ClassExpression:exit": classExit,
      MemberExpression(node) {
        const currentClass = classStack.at(-1);
        const currentMethod = methodStack.at(-1);
        if (!currentClass || !currentMethod) return;
        if (!isClassComponent(currentClass) || currentMethod.static) return;
        if (!AST11.isThisExpression(node.object) || !AST11.isKeyLiteralLike(node, node.property)) return;
        if (node.parent.type === AST_NODE_TYPES.AssignmentExpression && node.parent.left === node) {
          propertyDefs.get(currentClass)?.add(node.property);
          return;
        }
        O.map(getName3(node.property), (name2) => propertyUsages.get(currentClass)?.add(name2));
      },
      MethodDefinition: methodEnter,
      "MethodDefinition:exit": methodExit,
      PropertyDefinition: methodEnter,
      "PropertyDefinition:exit": methodExit,
      VariableDeclarator(node) {
        const currentClass = classStack.at(-1);
        const currentMethod = methodStack.at(-1);
        if (!currentClass || !currentMethod) return;
        if (!isClassComponent(currentClass) || currentMethod.static) return;
        if (node.init && AST11.isThisExpression(node.init) && node.id.type === AST_NODE_TYPES.ObjectPattern) {
          for (const prop of node.id.properties) {
            if (prop.type === AST_NODE_TYPES.Property && AST11.isKeyLiteralLike(prop, prop.key)) {
              O.map(getName3(prop.key), (name2) => propertyUsages.get(currentClass)?.add(name2));
            }
          }
        }
      }
    };
  },
  defaultOptions: []
});
var RULE_NAME43 = "no-unused-state";
var RULE_FEATURES43 = [
  "CHK"
];
function getName4(node) {
  if (node.type === AST_NODE_TYPES.TSAsExpression) {
    return getName4(node.expression);
  }
  if (node.type === AST_NODE_TYPES.Identifier || node.type === AST_NODE_TYPES.PrivateIdentifier) {
    return O.some(node.name);
  }
  if (node.type === AST_NODE_TYPES.Literal) {
    return O.some(String(node.value));
  }
  if (node.type === AST_NODE_TYPES.TemplateLiteral && node.expressions.length === 0) {
    return O.fromNullable(node.quasis[0]?.value.raw);
  }
  return O.none();
}
function isAssignmentToThisState2(node) {
  const { left } = node;
  return left.type === AST_NODE_TYPES.MemberExpression && AST11.isThisExpression(left.object) && O.exists(getName4(left.property), (name2) => name2 === "state");
}
var isGetDerivedStateFromProps = isMatching({
  key: {
    name: "getDerivedStateFromProps"
  },
  static: true,
  value: {
    params: P.array()
  }
});
var no_unused_state_default = createRule({
  meta: {
    type: "problem",
    docs: {
      description: "disallow unused state of class component",
      [Symbol.for("rule_features")]: RULE_FEATURES43
    },
    messages: {
      noUnusedState: "Unused class component state in '{{className}}'"
    },
    schema: []
  },
  name: RULE_NAME43,
  create(context) {
    const classStack = [];
    const methodStack = [];
    const constructorStack = [];
    const stateDefs = /* @__PURE__ */ new WeakMap();
    function classEnter(node) {
      classStack.push(node);
    }
    function classExit() {
      const currentClass = classStack.pop();
      if (!currentClass || !isClassComponent(currentClass)) return;
      const className = O.map(AST11.getClassIdentifier(currentClass), (id) => id.name);
      const [def, isUsed] = stateDefs.get(currentClass) ?? [O.none(), false];
      if (O.isNone(def) || isUsed) return;
      context.report({
        messageId: "noUnusedState",
        node: def.value,
        data: {
          className: O.getOrElse(className, () => "Component")
        }
      });
    }
    function methodEnter(node) {
      methodStack.push(node);
      const currentClass = classStack.at(-1);
      if (!currentClass || !isClassComponent(currentClass)) return;
      if (node.static) {
        if (isGetDerivedStateFromProps(node) && node.value.params.length > 1) {
          const [def] = stateDefs.get(currentClass) ?? [O.none()];
          stateDefs.set(currentClass, [def, true]);
        }
        return;
      }
      if (O.exists(getName4(node.key), (name2) => name2 === "state")) {
        stateDefs.set(currentClass, [O.some(node.key), false]);
      }
    }
    function methodExit() {
      methodStack.pop();
    }
    function constructorEnter(node) {
      constructorStack.push(node);
    }
    function constructorExit() {
      constructorStack.pop();
    }
    return {
      AssignmentExpression(node) {
        if (!isAssignmentToThisState2(node)) return;
        const currentClass = classStack.at(-1);
        if (!currentClass || !isClassComponent(currentClass)) return;
        const currentConstructor = constructorStack.at(-1);
        if (!currentConstructor || !currentClass.body.body.includes(currentConstructor)) return;
        const [_, isUsed] = stateDefs.get(currentClass) ?? [O.none(), false];
        stateDefs.set(currentClass, [O.some(node.left), isUsed]);
      },
      ClassDeclaration: classEnter,
      "ClassDeclaration:exit": classExit,
      ClassExpression: classEnter,
      "ClassExpression:exit": classExit,
      MemberExpression(node) {
        if (!AST11.isThisExpression(node.object)) return;
        if (!O.exists(getName4(node.property), (name2) => name2 === "state")) return;
        const currentClass = classStack.at(-1);
        if (!currentClass || !isClassComponent(currentClass)) return;
        const currentMethod = methodStack.at(-1);
        if (!currentMethod || currentMethod.static) return;
        if (currentMethod === constructorStack.at(-1)) return;
        if (!currentClass.body.body.includes(currentMethod)) return;
        const [def] = stateDefs.get(currentClass) ?? [O.none(), false];
        stateDefs.set(currentClass, [def, true]);
      },
      MethodDefinition: methodEnter,
      "MethodDefinition:exit": methodExit,
      "MethodDefinition[key.name='constructor']": constructorEnter,
      "MethodDefinition[key.name='constructor']:exit": constructorExit,
      PropertyDefinition: methodEnter,
      "PropertyDefinition:exit": methodExit,
      VariableDeclarator(node) {
        const currentClass = classStack.at(-1);
        if (!currentClass || !isClassComponent(currentClass)) return;
        const currentMethod = methodStack.at(-1);
        if (!currentMethod || currentMethod.static) return;
        if (currentMethod === constructorStack.at(-1)) return;
        if (!currentClass.body.body.includes(currentMethod)) return;
        if (!(node.init && AST11.isThisExpression(node.init) && node.id.type === AST_NODE_TYPES.ObjectPattern)) return;
        const hasState = node.id.properties.some((prop) => {
          if (prop.type === AST_NODE_TYPES.Property && AST11.isKeyLiteralLike(prop, prop.key)) {
            return O.exists(getName4(prop.key), (name2) => name2 === "state");
          }
          return false;
        });
        if (!hasState) return;
        const [def] = stateDefs.get(currentClass) ?? [O.none(), false];
        stateDefs.set(currentClass, [def, true]);
      }
    };
  },
  defaultOptions: []
});
var RULE_NAME44 = "no-useless-fragment";
function check(node, context, allowExpressions) {
  const initialScope = context.sourceCode.getScope(node);
  if (JSX8.isKeyedElement(node, initialScope)) return;
  if (JSX8.isBuiltInElement(node.parent)) context.report({ messageId: "noUselessFragmentInBuiltIn", node });
  if (node.children.length === 0) return context.report({ messageId: "noUselessFragment", node });
  const isChildren = AST11.isOneOf([AST_NODE_TYPES.JSXElement, AST_NODE_TYPES.JSXFragment])(node.parent);
  const [firstChildren] = node.children;
  if (allowExpressions && node.children.length === 1 && JSX8.isLiteral(firstChildren) && !isChildren) return;
  if (!allowExpressions && isChildren) {
    return context.report({ messageId: "noUselessFragment", node });
  } else if (!allowExpressions && !isChildren && node.children.length === 1) {
    return context.report({ messageId: "noUselessFragment", node });
  }
  const nonPaddingChildren = node.children.filter((child) => !JSX8.isPaddingSpaces(child));
  if (nonPaddingChildren.length > 1) return;
  if (nonPaddingChildren.length === 0) return context.report({ messageId: "noUselessFragment", node });
  const [first] = nonPaddingChildren;
  if (isMatching({ type: AST_NODE_TYPES.JSXExpressionContainer, expression: P.not(AST_NODE_TYPES.CallExpression) }, first)) return;
  context.report({ messageId: "noUselessFragment", node });
}
var defaultOptions = [{
  allowExpressions: true
}];
var no_useless_fragment_default = createRule({
  meta: {
    type: "problem",
    defaultOptions: [...defaultOptions],
    docs: {
      description: "disallow unnecessary fragments"
    },
    messages: {
      noUselessFragment: "A fragment contains less than two children is unnecessary.",
      noUselessFragmentInBuiltIn: "A fragment placed inside a built-in component is unnecessary."
    },
    schema: [{
      type: "object",
      additionalProperties: false,
      properties: {
        allowExpressions: {
          type: "boolean",
          description: "Allow fragments with a single expression child"
        }
      }
    }]
  },
  name: RULE_NAME44,
  create(context, [option]) {
    const { allowExpressions = true } = option;
    return {
      JSXElement(node) {
        if (!isFragmentElement(node, context)) return;
        check(node, context, allowExpressions);
      },
      JSXFragment(node) {
        check(node, context, allowExpressions);
      }
    };
  },
  defaultOptions
});
var RULE_NAME45 = "prefer-destructuring-assignment";
var RULE_FEATURES44 = [
  "CHK"
];
function isMemberExpressionWithObjectName(node) {
  return node.object.type === AST_NODE_TYPES.Identifier && "name" in node.object;
}
var prefer_destructuring_assignment_default = createRule({
  meta: {
    type: "problem",
    docs: {
      description: "enforce using destructuring assignment in component props and context",
      [Symbol.for("rule_features")]: RULE_FEATURES44
    },
    messages: {
      preferDestructuringAssignment: "Use destructuring assignment for {{name}}."
    },
    schema: []
  },
  name: RULE_NAME45,
  create(context) {
    const { ctx, listeners } = useComponentCollector(context);
    const memberExpressionWithNames = [];
    return {
      ...listeners,
      MemberExpression(node) {
        if (isMemberExpressionWithObjectName(node)) {
          const scope = context.sourceCode.getScope(node);
          memberExpressionWithNames.push([scope, node]);
        }
      },
      "Program:exit"(node) {
        const components = Array.from(ctx.getAllComponents(node).values());
        function isFunctionComponent(block) {
          if (!AST11.isFunction(block)) return false;
          const maybeId = AST11.getFunctionIdentifier(block);
          return O.isSome(maybeId) && isComponentName(maybeId.value.name) && components.some((component) => component.node === block);
        }
        for (const [initialScope, memberExpression] of memberExpressionWithNames) {
          let scope = initialScope;
          let isComponent = isFunctionComponent(scope.block);
          while (!isComponent && scope.upper && scope.upper !== scope) {
            scope = scope.upper;
            isComponent = isFunctionComponent(scope.block);
          }
          if (!isComponent) continue;
          const component = scope.block;
          if (!("params" in component)) continue;
          const [props, ctx2] = component.params;
          const isMatch = isMatching({ name: memberExpression.object.name });
          if (isMatch(props)) {
            context.report({
              messageId: "preferDestructuringAssignment",
              node: memberExpression,
              data: {
                name: "props"
              }
            });
          }
          if (isMatch(ctx2)) {
            context.report({
              messageId: "preferDestructuringAssignment",
              node: memberExpression,
              data: {
                name: "context"
              }
            });
          }
        }
      }
    };
  },
  defaultOptions: []
});
var RULE_NAME46 = "prefer-react-namespace-import";
var RULE_FEATURES45 = [
  "CHK",
  "FIX"
];
var prefer_react_namespace_import_default = createRule({
  meta: {
    type: "problem",
    docs: {
      description: "enforce React is imported via a namespace import",
      [Symbol.for("rule_features")]: RULE_FEATURES45
    },
    fixable: "code",
    messages: {
      preferReactNamespaceImport: 'Prefer importing React as `import * as React from "{{importSource}}";`'
    },
    schema: []
  },
  name: RULE_NAME46,
  create(context) {
    const importSource = decodeSettings(context.settings).importSource ?? "react";
    return {
      [`ImportDeclaration[source.value="${importSource}"] ImportDefaultSpecifier`](node) {
        const hasOtherSpecifiers = node.parent.specifiers.length > 1;
        context.report({
          messageId: "preferReactNamespaceImport",
          node: hasOtherSpecifiers ? node : node.parent,
          data: { importSource },
          fix(fixer) {
            const quote = node.parent.source.raw.at(0) ?? "'";
            const isTypeImport = node.parent.importKind === "type";
            const importStringPrefix = `import${isTypeImport ? " type" : ""}`;
            const importSourceQuoted = `${quote}${importSource}${quote}`;
            const sourceCode = context.sourceCode.getText(node.parent);
            const semiColon = sourceCode.endsWith(";") ? ";" : "";
            if (!hasOtherSpecifiers) {
              return fixer.replaceText(
                node.parent,
                `${importStringPrefix} * as ${node.local.name} from ${importSourceQuoted}${semiColon}`
              );
            }
            const specifiers = sourceCode.slice(sourceCode.indexOf("{"), sourceCode.indexOf("}") + 1);
            return fixer.replaceText(
              node.parent,
              `${importStringPrefix} * as ${node.local.name} from ${importSourceQuoted}${semiColon}
${importStringPrefix} ${specifiers} from ${importSourceQuoted}${semiColon}`
            );
          }
        });
      }
    };
  },
  defaultOptions: []
});
var RULE_NAME47 = "prefer-read-only-props";
var RULE_FEATURES46 = [
  "CHK",
  "TSC"
];
function isReadonlyType(type, services) {
  try {
    const im = getTypeImmutability(services.program, type);
    return isUnknown(im) || isImmutable(im) || isReadonlyShallow(im) || isReadonlyDeep(im);
  } catch {
    return true;
  }
}
var prefer_read_only_props_default = createRule({
  meta: {
    type: "problem",
    docs: {
      description: "enforce read-only props in components",
      [Symbol.for("rule_features")]: RULE_FEATURES46
    },
    messages: {
      preferReadOnlyProps: "A function component's props should be read-only."
    },
    schema: []
  },
  name: RULE_NAME47,
  create(context) {
    const services = ESLintUtils.getParserServices(context, false);
    const { ctx, listeners } = useComponentCollector(context);
    return {
      ...listeners,
      "Program:exit"(node) {
        const components = ctx.getAllComponents(node);
        for (const [_, component] of components) {
          const [props] = component.node.params;
          if (!props) continue;
          const propsType = getConstrainedTypeAtLocation(services, props);
          if (isTypeReadonly(services.program, propsType) || isReadonlyType(propsType, services)) continue;
          context.report({ messageId: "preferReadOnlyProps", node: props });
        }
      }
    };
  },
  defaultOptions: []
});
var RULE_NAME48 = "prefer-shorthand-boolean";
var RULE_FEATURES47 = [
  "CHK",
  "FIX"
];
var prefer_shorthand_boolean_default = createRule({
  meta: {
    type: "problem",
    docs: {
      description: "enforce using shorthand boolean attributes",
      [Symbol.for("rule_features")]: RULE_FEATURES47
    },
    fixable: "code",
    messages: {
      preferShorthandBoolean: "Use shorthand boolean attribute '{{propName}}'."
    },
    schema: []
  },
  name: RULE_NAME48,
  create(context) {
    function getReportDescriptor(node) {
      const { value } = node;
      const propName = JSX8.getPropName(node);
      const hasValueTrue = value?.type === AST_NODE_TYPES.JSXExpressionContainer && value.expression.type === AST_NODE_TYPES.Literal && value.expression.value === true;
      if (!hasValueTrue) return O.none();
      return O.some({
        messageId: "preferShorthandBoolean",
        node,
        data: {
          propName
        },
        fix: (fixer) => fixer.removeRange([node.name.range[1], value.range[1]])
      });
    }
    return {
      JSXAttribute: F.flow(getReportDescriptor, O.map(context.report))
    };
  },
  defaultOptions: []
});
var RULE_NAME49 = "prefer-shorthand-fragment";
var RULE_FEATURES48 = [
  "CHK"
];
var prefer_shorthand_fragment_default = createRule({
  meta: {
    type: "problem",
    docs: {
      description: "enforce using fragment syntax instead of 'Fragment' component",
      [Symbol.for("rule_features")]: RULE_FEATURES48
    },
    messages: {
      preferShorthandFragment: "Use fragment shorthand syntax instead of 'Fragment' component."
    },
    schema: []
  },
  name: RULE_NAME49,
  create(context) {
    function getReportDescriptor(node) {
      if (!isFragmentElement(node, context)) return O.none();
      const hasAttributes = node.openingElement.attributes.length > 0;
      if (hasAttributes) return O.none();
      return O.some({
        messageId: "preferShorthandFragment",
        node
      });
    }
    return {
      JSXElement: F.flow(getReportDescriptor, O.map(context.report))
    };
  },
  defaultOptions: []
});
var RULE_NAME50 = "use-jsx-vars";
var RULE_FEATURES49 = [];
var use_jsx_vars_default = createRule({
  meta: {
    type: "problem",
    docs: {
      description: (
        // eslint-disable-next-line eslint-plugin/require-meta-docs-description
        "helpes `eslint/no-unused-vars` to correctly mark JSX variables as used."
      ),
      [Symbol.for("rule_features")]: RULE_FEATURES49
    },
    messages: {
      useJsxVars: ""
    },
    schema: []
  },
  name: RULE_NAME50,
  create(context) {
    function getName5(node) {
      switch (node.type) {
        case AST_NODE_TYPES.JSXIdentifier:
          return O.some(node.name);
        case AST_NODE_TYPES.JSXMemberExpression:
          return getName5(node.object);
        default:
          return O.none();
      }
    }
    return {
      JSXOpeningElement(node) {
        if (node.name.type === AST_NODE_TYPES.JSXIdentifier && /^[a-z]/u.test(node.name.name)) return;
        O.map(getName5(node.name), (name2) => {
          context.sourceCode.markVariableAsUsed(name2, node);
        });
      }
    };
  },
  defaultOptions: []
});

// src/index.ts
var index_default = {
  meta: {
    name,
    version
  },
  rules: {
    "avoid-shorthand-boolean": avoid_shorthand_boolean_default,
    "avoid-shorthand-fragment": avoid_shorthand_fragment_default,
    "ensure-forward-ref-using-ref": ensure_forward_ref_using_ref_default,
    "no-access-state-in-setstate": no_access_state_in_setstate_default,
    "no-array-index-key": no_array_index_key_default,
    "no-children-count": no_children_count_default,
    "no-children-for-each": no_children_for_each_default,
    "no-children-map": no_children_map_default,
    "no-children-only": no_children_only_default,
    "no-children-prop": no_children_prop_default,
    "no-children-to-array": no_children_to_array_default,
    "no-class-component": no_class_component_default,
    "no-clone-element": no_clone_element_default,
    "no-comment-textnodes": no_comment_textnodes_default,
    "no-complex-conditional-rendering": no_complex_conditional_rendering_default,
    "no-component-will-mount": no_component_will_mount_default,
    "no-component-will-receive-props": no_component_will_receive_props_default,
    "no-component-will-update": no_component_will_update_default,
    "no-context-provider": no_context_provider_default,
    "no-create-ref": no_create_ref_default,
    "no-default-props": no_default_props_default,
    "no-direct-mutation-state": no_direct_mutation_state_default,
    "no-duplicate-jsx-props": no_duplicate_jsx_props_default,
    "no-duplicate-key": no_duplicate_key_default,
    "no-forward-ref": no_forward_ref_default,
    "no-implicit-key": no_implicit_key_default,
    "no-leaked-conditional-rendering": no_leaked_conditional_rendering_default,
    "no-missing-component-display-name": no_missing_component_display_name_default,
    "no-missing-key": no_missing_key_default,
    "no-nested-components": no_nested_components_default,
    "no-prop-types": no_prop_types_default,
    "no-redundant-should-component-update": no_redundant_should_component_update_default,
    "no-set-state-in-component-did-mount": no_set_state_in_component_did_mount_default,
    "no-set-state-in-component-did-update": no_set_state_in_component_did_update_default,
    "no-set-state-in-component-will-update": no_set_state_in_component_will_update_default,
    "no-string-refs": no_string_refs_default,
    "no-unsafe-component-will-mount": no_unsafe_component_will_mount_default,
    "no-unsafe-component-will-receive-props": no_unsafe_component_will_receive_props_default,
    "no-unsafe-component-will-update": no_unsafe_component_will_update_default,
    "no-unstable-context-value": no_unstable_context_value_default,
    "no-unstable-default-props": no_unstable_default_props_default,
    "no-unused-class-component-members": no_unused_class_component_members_default,
    "no-unused-state": no_unused_state_default,
    "no-useless-fragment": no_useless_fragment_default,
    "prefer-destructuring-assignment": prefer_destructuring_assignment_default,
    "prefer-react-namespace-import": prefer_react_namespace_import_default,
    "prefer-read-only-props": prefer_read_only_props_default,
    "prefer-shorthand-boolean": prefer_shorthand_boolean_default,
    "prefer-shorthand-fragment": prefer_shorthand_fragment_default,
    "use-jsx-vars": use_jsx_vars_default,
    // Part: deprecated rules
    /** @deprecated Use `no-duplicate-jsx-props` instead. */
    "jsx-no-duplicate-props": no_duplicate_jsx_props_default,
    /** @deprecated Use `use-jsx-vars` instead. */
    "jsx-uses-vars": use_jsx_vars_default,
    /** @deprecated Use `no-complex-conditional-rendering` instead. */
    "no-complicated-conditional-rendering": no_complex_conditional_rendering_default
  }
};

export { index_default as default };
