import * as AST2 from '@eslint-react/ast';
import { isInversePhase, ERPhaseRelevance, isSetupFunction, isCleanupFunction, isComponentDidMountFunction, isComponentWillUnmountFunction } from '@eslint-react/core';
import { Data, O, F, or, not, isBoolean } from '@eslint-react/eff';
import * as JSX from '@eslint-react/jsx';
import * as VAR2 from '@eslint-react/var';
import { AST_NODE_TYPES } from '@typescript-eslint/utils';
import { match, isMatching, P } from 'ts-pattern';
import { createRuleForPlugin } from '@eslint-react/shared';
import { AST_NODE_TYPES as AST_NODE_TYPES$1 } from '@typescript-eslint/types';

// package.json
var name = "eslint-plugin-react-web-api";
var version = "1.22.1";
var createRule = createRuleForPlugin("web-api");
function getInstanceID(node, prev) {
  switch (true) {
    case (node.type === AST_NODE_TYPES$1.VariableDeclarator && node.init === prev):
      return O.some(node.id);
    case (node.type === AST_NODE_TYPES$1.AssignmentExpression && node.right === prev):
      return O.some(node.left);
    case (node.type === AST_NODE_TYPES$1.PropertyDefinition && node.value === prev):
      return O.some(node.key);
    case (node.type === AST_NODE_TYPES$1.BlockStatement || node.type === AST_NODE_TYPES$1.Program || node.parent === node):
      return O.none();
    default:
      return getInstanceID(node.parent, node);
  }
}
function getPhaseKindOfFunction(node) {
  return match(node).when(isSetupFunction, () => O.some("setup")).when(isCleanupFunction, () => O.some("cleanup")).when(isComponentDidMountFunction, () => O.some("mount")).when(isComponentWillUnmountFunction, () => O.some("unmount")).otherwise(O.none);
}
function isInstanceIDEqual(a, b, context) {
  return AST2.isNodeEqual(a, b) || VAR2.isNodeValueEqual(a, b, [
    context.sourceCode.getScope(a),
    context.sourceCode.getScope(b)
  ]);
}
var EventListenerEntry = Data.taggedEnum();
var ObserverEntry = Data.taggedEnum();

// src/rules/no-leaked-event-listener.ts
var RULE_NAME = "no-leaked-event-listener";
var RULE_FEATURES = [
  "CHK"
];
var defaultOptions = {
  capture: O.some(false),
  once: O.some(false),
  signal: O.none()
};
function getCallKind(node) {
  switch (true) {
    case (node.callee.type === AST_NODE_TYPES.Identifier && isMatching(P.union("addEventListener", "removeEventListener", "abort"), node.callee.name)):
      return node.callee.name;
    case (node.callee.type === AST_NODE_TYPES.MemberExpression && node.callee.property.type === AST_NODE_TYPES.Identifier && isMatching(P.union("addEventListener", "removeEventListener", "abort"), node.callee.property.name)):
      return node.callee.property.name;
    default:
      return "other";
  }
}
function getFunctionKind(node) {
  return O.getOrElse(getPhaseKindOfFunction(node), F.constant("other"));
}
function getOptions(node, initialScope) {
  const findProp = (properties, propName) => {
    return JSX.findPropInProperties(properties, initialScope)(propName);
  };
  const getPropValue = (prop) => {
    if (prop.type !== AST_NODE_TYPES.Property) return O.none();
    const { value } = prop;
    switch (value.type) {
      case AST_NODE_TYPES.Literal: {
        return O.some(value.value);
      }
      default: {
        return VAR2.getStaticValue(value, initialScope);
      }
    }
  };
  function getOpts(node2) {
    switch (node2.type) {
      case AST_NODE_TYPES.Identifier: {
        return F.pipe(
          VAR2.findVariable(node2, initialScope),
          O.flatMap(VAR2.getVariableNode(0)),
          O.filter(AST2.is(AST_NODE_TYPES.ObjectExpression)),
          O.map(getOpts),
          O.getOrElse(() => defaultOptions)
        );
      }
      case AST_NODE_TYPES.Literal: {
        return { ...defaultOptions, capture: O.some(!!node2.value) };
      }
      case AST_NODE_TYPES.ObjectExpression: {
        const pOnce = findProp(node2.properties, "once");
        const vOnce = O.flatMap(pOnce, getPropValue).pipe(O.filter(isBoolean));
        const pCapture = findProp(node2.properties, "capture");
        const vCapture = O.flatMap(pCapture, getPropValue).pipe(O.filter(isBoolean));
        const pSignal = findProp(node2.properties, "signal");
        const vSignal = O.flatMap(pSignal, (prop) => {
          if (prop.type !== AST_NODE_TYPES.Property) return O.none();
          const { value } = prop;
          const getSignalExp = (node3) => {
            switch (node3.type) {
              case AST_NODE_TYPES.Identifier:
                return F.pipe(
                  VAR2.findVariable(node3, initialScope),
                  O.flatMap(VAR2.getVariableNode(0)),
                  O.flatMap(getSignalExp)
                );
              case AST_NODE_TYPES.MemberExpression:
                return O.some(node3);
              default:
                return O.none();
            }
          };
          return getSignalExp(value);
        });
        return { capture: vCapture, once: vOnce, signal: vSignal };
      }
      default: {
        return defaultOptions;
      }
    }
  }
  return getOpts(node);
}
var no_leaked_event_listener_default = createRule({
  meta: {
    type: "problem",
    docs: {
      description: "enforce that every 'addEventListener' in a component or custom Hook has a corresponding 'removeEventListener'.",
      [Symbol.for("rule_features")]: RULE_FEATURES
    },
    messages: {
      noLeakedEventListenerInEffect: "A 'addEventListener' in '{{effectMethodKind}}' should have a corresponding 'removeEventListener' in its cleanup function.",
      noLeakedEventListenerInLifecycle: "A 'addEventListener' in 'componentDidMount' should have a corresponding 'removeEventListener' in 'componentWillUnmount' method.",
      noLeakedEventListenerOfInlineFunction: "A '{{eventMethodKind}}' should not have an inline listener function."
    },
    schema: []
  },
  name: RULE_NAME,
  create(context) {
    if (!context.sourceCode.text.includes("addEventListener")) return {};
    if (!/use\w*Effect|componentDidMount|componentWillUnmount/u.test(context.sourceCode.text)) return {};
    const fStack = [];
    const aEntries = [];
    const rEntries = [];
    const abortedSignals = [];
    function checkInlineFunction(node, callKind, options) {
      const [_, listener] = node.arguments;
      if (!AST2.isFunction(listener)) return O.none();
      if (O.isSome(options.signal)) return O.none();
      return O.some({
        messageId: "noLeakedEventListenerOfInlineFunction",
        node: listener,
        data: { eventMethodKind: callKind }
      });
    }
    const isSameObject = F.dual(2, (a, b) => {
      switch (true) {
        case (a.type === AST_NODE_TYPES.MemberExpression && b.type === AST_NODE_TYPES.MemberExpression):
          return AST2.isNodeEqual(a.object, b.object);
        // TODO: Maybe there other cases to consider here.
        default:
          return false;
      }
    });
    const isInverseEntry = F.dual(2, (aEntry, rEntry) => {
      const { type: aType, callee: aCallee, capture: aCapture, listener: aListener, phase: aPhase } = aEntry;
      const { type: rType, callee: rCallee, capture: rCapture, listener: rListener, phase: rPhase } = rEntry;
      if (!isInversePhase(aPhase, rPhase)) return false;
      return isSameObject(aCallee, rCallee) && AST2.isNodeEqual(aListener, rListener) && VAR2.isNodeValueEqual(aType, rType, [
        context.sourceCode.getScope(aType),
        context.sourceCode.getScope(rType)
      ]) && O.getOrElse(aCapture, F.constFalse) === O.getOrElse(rCapture, F.constFalse);
    });
    return {
      [":function"](node) {
        const functionKind = getFunctionKind(node);
        fStack.push([node, functionKind]);
      },
      [":function:exit"]() {
        fStack.pop();
      },
      ["CallExpression"](node) {
        const [fNode, fKind] = fStack.findLast((f) => f.at(1) !== "other") ?? [];
        if (!fNode || !fKind) return;
        if (!ERPhaseRelevance.has(fKind)) return;
        match(getCallKind(node)).with("addEventListener", (callKind) => {
          const [type, listener, options] = node.arguments;
          if (!type || !listener) return;
          const opts = options ? getOptions(options, context.sourceCode.getScope(options)) : defaultOptions;
          const { callee } = node;
          O.map(checkInlineFunction(node, callKind, opts), context.report);
          aEntries.push(EventListenerEntry.AddEventListener({
            ...opts,
            type,
            node,
            callee,
            listener,
            phase: fKind
          }));
        }).with("removeEventListener", (callKind) => {
          const [type, listener, options] = node.arguments;
          if (!type || !listener) return;
          const opts = options ? getOptions(options, context.sourceCode.getScope(options)) : defaultOptions;
          const { callee } = node;
          O.map(checkInlineFunction(node, callKind, opts), context.report);
          rEntries.push(EventListenerEntry.RemoveEventListener({
            ...opts,
            type,
            node,
            callee,
            listener,
            phase: fKind
          }));
        }).with("abort", () => {
          abortedSignals.push(node.callee);
        }).otherwise(F.constVoid);
      },
      ["Program:exit"]() {
        for (const aEntry of aEntries) {
          if (O.exists(aEntry.signal, (signal) => abortedSignals.some(isSameObject(signal)))) continue;
          if (rEntries.some(isInverseEntry(aEntry))) continue;
          switch (aEntry.phase) {
            case "cleanup":
            case "setup":
              context.report({
                messageId: "noLeakedEventListenerInEffect",
                node: aEntry.node,
                data: {
                  effectMethodKind: "useEffect"
                }
              });
              continue;
            case "mount":
            case "unmount":
              context.report({
                messageId: "noLeakedEventListenerInLifecycle",
                node: aEntry.node
              });
              continue;
          }
        }
      }
    };
  },
  defaultOptions: []
});
var RULE_NAME2 = "no-leaked-interval";
var RULE_FEATURES2 = [
  "CHK"
];
function getCallKind2(node) {
  switch (true) {
    case (node.callee.type === AST_NODE_TYPES.Identifier && isMatching(P.union("setInterval", "clearInterval"), node.callee.name)):
      return node.callee.name;
    case (node.callee.type === AST_NODE_TYPES.MemberExpression && node.callee.property.type === AST_NODE_TYPES.Identifier && isMatching(P.union("setInterval", "clearInterval"), node.callee.property.name)):
      return node.callee.property.name;
    default:
      return "other";
  }
}
var no_leaked_interval_default = createRule({
  meta: {
    type: "problem",
    docs: {
      description: "enforce that every 'setInterval' in a component or custom Hook has a corresponding 'clearInterval'.",
      [Symbol.for("rule_features")]: RULE_FEATURES2
    },
    messages: {
      noLeakedIntervalInEffect: "A 'setInterval' created in '{{ kind }}' must be cleared with 'clearInterval' in the cleanup function.",
      noLeakedIntervalInLifecycle: "A 'setInterval' created in '{{ kind }}' must be cleared with 'clearInterval' in the 'componentWillUnmount' method.",
      noLeakedIntervalNoIntervalId: "A 'setInterval' must be assigned to a variable for proper cleanup."
    },
    schema: []
  },
  name: RULE_NAME2,
  create(context) {
    if (!context.sourceCode.text.includes("setInterval")) return {};
    const fStack = [];
    const sEntries = [];
    const cEntries = [];
    const isInverseEntry = F.dual(2, (a, b) => {
      return isInstanceIDEqual(a.timerID, b.timerID, context);
    });
    return {
      [":function"](node) {
        const fKind = O.getOrElse(getPhaseKindOfFunction(node), () => "other");
        fStack.push([node, fKind]);
      },
      [":function:exit"]() {
        fStack.pop();
      },
      ["CallExpression"](node) {
        switch (getCallKind2(node)) {
          case "clearInterval": {
            const [fNode, fKind] = fStack.findLast((f) => f.at(1) !== "other") ?? [];
            if (!fNode || !fKind) break;
            if (!ERPhaseRelevance.has(fKind)) break;
            const [intervalIdNode] = node.arguments;
            if (!intervalIdNode) break;
            cEntries.push({
              kind: "interval",
              node,
              callee: node.callee,
              phase: fKind,
              timerID: intervalIdNode
            });
            break;
          }
          case "setInterval": {
            const [fNode, fKind] = fStack.findLast((f) => f.at(1) !== "other") ?? [];
            if (!fNode || !fKind) break;
            if (!ERPhaseRelevance.has(fKind)) break;
            const intervalIdNode = O.getOrNull(VAR2.getVariableDeclaratorID(node));
            if (!intervalIdNode) {
              context.report({
                messageId: "noLeakedIntervalNoIntervalId",
                node
              });
              break;
            }
            sEntries.push({
              kind: "interval",
              node,
              callee: node.callee,
              phase: fKind,
              timerID: intervalIdNode
            });
            break;
          }
        }
      },
      ["Program:exit"]() {
        for (const sEntry of sEntries) {
          if (cEntries.some(isInverseEntry(sEntry))) continue;
          switch (sEntry.phase) {
            case "cleanup":
            case "setup":
              context.report({
                messageId: "noLeakedIntervalInEffect",
                node: sEntry.node,
                data: {
                  kind: "useEffect"
                }
              });
              continue;
            case "mount":
            case "unmount":
              context.report({
                messageId: "noLeakedIntervalInLifecycle",
                node: sEntry.node,
                data: {
                  kind: "componentDidMount"
                }
              });
              continue;
          }
        }
      }
    };
  },
  defaultOptions: []
});
var RULE_NAME3 = "no-leaked-resize-observer";
var RULE_FEATURES3 = [
  "CHK"
];
function isNewResizeObserver(node) {
  return node.type === AST_NODE_TYPES.NewExpression && node.callee.type === AST_NODE_TYPES.Identifier && node.callee.name === "ResizeObserver";
}
function isFromObserver(node, context) {
  switch (true) {
    case node.type === AST_NODE_TYPES.Identifier:
      return F.pipe(
        VAR2.findVariable(node, context.sourceCode.getScope(node)),
        O.flatMap(VAR2.getVariableNode(0)),
        O.exists(isNewResizeObserver)
      );
    case node.type === AST_NODE_TYPES.MemberExpression:
      return isFromObserver(node.object, context);
    default:
      return false;
  }
}
function getCallKind3(node, context) {
  switch (true) {
    case (node.callee.type === AST_NODE_TYPES.Identifier && isMatching(P.union("observe", "unobserve", "disconnect"), node.callee.name) && isFromObserver(node.callee, context)):
      return node.callee.name;
    case (node.callee.type === AST_NODE_TYPES.MemberExpression && node.callee.property.type === AST_NODE_TYPES.Identifier && isMatching(P.union("observe", "unobserve", "disconnect"), node.callee.property.name) && isFromObserver(node.callee, context)):
      return node.callee.property.name;
    default:
      return "other";
  }
}
function getFunctionKind2(node) {
  return O.getOrElse(getPhaseKindOfFunction(node), F.constant("other"));
}
var no_leaked_resize_observer_default = createRule({
  meta: {
    type: "problem",
    docs: {
      description: "enforce cleanup of 'ResizeObserver' instances in components and custom Hooks.",
      [Symbol.for("rule_features")]: RULE_FEATURES3
    },
    messages: {
      noLeakedResizeObserver: "A 'ResizeObserver' instance created in 'useEffect' must be disconnected in the cleanup function.",
      noLeakedResizeObserverInControlFlow: "Dynamically added 'ResizeObserver.observe' should be cleared all at once using 'ResizeObserver.disconnect' in the cleanup function.",
      noLeakedResizeObserverNoFloatingInstance: "A 'ResizeObserver' instance created in component or custom Hook must be assigned to a variable for proper cleanup."
    },
    schema: []
  },
  name: RULE_NAME3,
  create(context) {
    if (!context.sourceCode.text.includes("ResizeObserver")) return {};
    const fStack = [];
    const observers = [];
    const oEntries = [];
    const uEntries = [];
    const dEntries = [];
    return {
      [":function"](node) {
        const functionKind = getFunctionKind2(node);
        fStack.push([node, functionKind]);
      },
      [":function:exit"]() {
        fStack.pop();
      },
      ["CallExpression"](node) {
        const [_, fKind] = fStack.findLast((f) => f.at(1) !== "other") ?? [];
        if (node.callee.type !== AST_NODE_TYPES.MemberExpression) return;
        if (!ERPhaseRelevance.has(fKind)) return;
        const { object } = node.callee;
        match(getCallKind3(node, context)).with("disconnect", () => {
          dEntries.push(
            ObserverEntry.Disconnect({
              kind: "ResizeObserver",
              node,
              callee: node.callee,
              observer: object,
              phase: fKind
            })
          );
        }).with("observe", () => {
          const [element] = node.arguments;
          if (!element) return;
          oEntries.push(
            ObserverEntry.Observe({
              kind: "ResizeObserver",
              node,
              callee: node.callee,
              element,
              observer: object,
              phase: fKind
            })
          );
        }).with("unobserve", () => {
          const [element] = node.arguments;
          if (!element) return;
          uEntries.push(
            ObserverEntry.Unobserve({
              kind: "ResizeObserver",
              node,
              callee: node.callee,
              element,
              observer: object,
              phase: fKind
            })
          );
        }).otherwise(F.constVoid);
      },
      ["NewExpression"](node) {
        const [fNode, fKind] = fStack.findLast((f) => f.at(1) !== "other") ?? [];
        if (!fNode || !ERPhaseRelevance.has(fKind)) return;
        if (!isNewResizeObserver(node)) return;
        const id = getInstanceID(node);
        if (O.isNone(id)) {
          context.report({
            messageId: "noLeakedResizeObserverNoFloatingInstance",
            node
          });
          return;
        }
        observers.push([node, id.value, fKind, fNode]);
      },
      ["Program:exit"]() {
        for (const [node, id, _, phaseNode] of observers) {
          if (dEntries.some((e) => isInstanceIDEqual(e.observer, id, context))) continue;
          const oentries = oEntries.filter((e) => isInstanceIDEqual(e.observer, id, context));
          const uentries = uEntries.filter((e) => isInstanceIDEqual(e.observer, id, context));
          const isDynamic = or(AST2.isConditional, AST2.is(AST_NODE_TYPES.CallExpression));
          const isPhaseNode = (node2) => node2 === phaseNode;
          const hasDynamicallyAdded = oentries.some((e) => O.exists(AST2.traverseUp(e.node, or(isDynamic, isPhaseNode)), not(isPhaseNode)));
          if (hasDynamicallyAdded) {
            context.report({ messageId: "noLeakedResizeObserverInControlFlow", node });
            continue;
          }
          for (const oEntry of oentries) {
            if (uentries.some((uEntry) => isInstanceIDEqual(uEntry.element, oEntry.element, context))) continue;
            context.report({ messageId: "noLeakedResizeObserver", node: oEntry.node });
          }
        }
      }
    };
  },
  defaultOptions: []
});
var RULE_NAME4 = "no-leaked-timeout";
var RULE_FEATURES4 = [
  "CHK"
];
function getCallKind4(node) {
  switch (true) {
    case (node.callee.type === AST_NODE_TYPES.Identifier && isMatching(P.union("setTimeout", "clearTimeout"), node.callee.name)):
      return node.callee.name;
    case (node.callee.type === AST_NODE_TYPES.MemberExpression && node.callee.property.type === AST_NODE_TYPES.Identifier && isMatching(P.union("setTimeout", "clearTimeout"), node.callee.property.name)):
      return node.callee.property.name;
    default:
      return "other";
  }
}
var no_leaked_timeout_default = createRule({
  meta: {
    type: "problem",
    docs: {
      description: "enforce that every 'setTimeout' in a component or custom Hook has a corresponding 'clearTimeout'.",
      [Symbol.for("rule_features")]: RULE_FEATURES4
    },
    messages: {
      noLeakedTimeoutInEffect: "A 'setTimeout' created in '{{ kind }}' must be cleared with 'clearTimeout' in the cleanup function.",
      noLeakedTimeoutInLifecycle: "A 'setTimeout' created in '{{ kind }}' must be cleared with 'clearTimeout' in the 'componentWillUnmount' method.",
      noLeakedTimeoutNoTimeoutId: "A 'setTimeout' must be assigned to a variable for proper cleanup."
    },
    schema: []
  },
  name: RULE_NAME4,
  create(context) {
    if (!context.sourceCode.text.includes("setTimeout")) return {};
    const fStack = [];
    const sEntries = [];
    const rEntries = [];
    const isInverseEntry = F.dual(2, (a, b) => {
      return isInstanceIDEqual(a.timerID, b.timerID, context);
    });
    return {
      [":function"](node) {
        const fKind = O.getOrElse(getPhaseKindOfFunction(node), () => "other");
        fStack.push([node, fKind]);
      },
      [":function:exit"]() {
        fStack.pop();
      },
      ["CallExpression"](node) {
        const [fNode, fKind] = fStack.findLast((f) => f.at(1) !== "other") ?? [];
        if (!fNode || !fKind) return;
        if (!ERPhaseRelevance.has(fKind)) return;
        switch (getCallKind4(node)) {
          case "clearTimeout": {
            const [timeoutIdNode] = node.arguments;
            if (!timeoutIdNode) break;
            rEntries.push({
              kind: "timeout",
              node,
              callee: node.callee,
              phase: fKind,
              timerID: timeoutIdNode
            });
            break;
          }
          case "setTimeout": {
            const timeoutIdNode = O.getOrNull(VAR2.getVariableDeclaratorID(node));
            if (!timeoutIdNode) {
              context.report({
                messageId: "noLeakedTimeoutNoTimeoutId",
                node
              });
              break;
            }
            sEntries.push({
              kind: "timeout",
              node,
              callee: node.callee,
              phase: fKind,
              timerID: timeoutIdNode
            });
            break;
          }
        }
      },
      ["Program:exit"]() {
        for (const sEntry of sEntries) {
          if (rEntries.some(isInverseEntry(sEntry))) continue;
          switch (sEntry.phase) {
            case "cleanup":
            case "setup":
              context.report({
                messageId: "noLeakedTimeoutInEffect",
                node: sEntry.node,
                data: {
                  kind: "useEffect"
                }
              });
              continue;
            case "mount":
            case "unmount":
              context.report({
                messageId: "noLeakedTimeoutInLifecycle",
                node: sEntry.node,
                data: {
                  kind: "componentDidMount"
                }
              });
              continue;
          }
        }
      }
    };
  },
  defaultOptions: []
});

// src/index.ts
var index_default = {
  meta: {
    name,
    version
  },
  rules: {
    "no-leaked-event-listener": no_leaked_event_listener_default,
    "no-leaked-interval": no_leaked_interval_default,
    "no-leaked-resize-observer": no_leaked_resize_observer_default,
    "no-leaked-timeout": no_leaked_timeout_default
  }
};

export { index_default as default };
