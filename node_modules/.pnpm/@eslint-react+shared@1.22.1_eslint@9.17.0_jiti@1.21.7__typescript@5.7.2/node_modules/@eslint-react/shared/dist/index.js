'use strict';

var utils = require('@typescript-eslint/utils');
var eff = require('@eslint-react/eff');
var tsPattern = require('ts-pattern');
var module$1 = require('module');
var valibot = require('valibot');
var fastEquals = require('fast-equals');
var memoize = require('micro-memoize');
var pm = require('picomatch');

var _documentCurrentScript = typeof document !== 'undefined' ? document.currentScript : null;
function _interopDefault (e) { return e && e.__esModule ? e : { default: e }; }

var module__default = /*#__PURE__*/_interopDefault(module$1);
var memoize__default = /*#__PURE__*/_interopDefault(memoize);
var pm__default = /*#__PURE__*/_interopDefault(pm);

// src/constants.ts
var NPM_SCOPE = "@eslint-react";
var GITHUB_URL = "https://github.com/rel1cx/eslint-react";
var WEBSITE_URL = "https://eslint-react.xyz";
var RE_PASCAL_CASE = /^[A-Z][\dA-Za-z]*$/u;
var RE_CAMEL_CASE = /^[a-z][\dA-Za-z]*$/u;
var RE_KEBAB_CASE = /^[a-z][\d\-a-z]*$/u;
var RE_SNAKE_CASE = /^[a-z][\d_a-z]*$/u;
var RE_CONSTANT_CASE = /^[A-Z][\d_A-Z]*$/u;
var RE_JAVASCRIPT_PROTOCOL = /^[\u0000-\u001F ]*j[\t\n\r]*a[\t\n\r]*v[\t\n\r]*a[\t\n\r]*s[\t\n\r]*c[\t\n\r]*r[\t\n\r]*i[\t\n\r]*p[\t\n\r]*t[\t\n\r]*:/iu;
var HOST_HTML_COMPONENT_TYPES = [
  "aside",
  "audio",
  "b",
  "base",
  "bdi",
  "bdo",
  "blockquote",
  "body",
  "br",
  "button",
  "canvas",
  "caption",
  "cite",
  "code",
  "col",
  "colgroup",
  "data",
  "datalist",
  "dd",
  "del",
  "details",
  "dfn",
  "dialog",
  "div",
  "dl",
  "dt",
  "em",
  "embed",
  "fieldset",
  "figcaption",
  "figure",
  "footer",
  "form",
  "h1",
  "head",
  "header",
  "hgroup",
  "hr",
  "html",
  "i",
  "iframe",
  "img",
  "input",
  "ins",
  "kbd",
  "label",
  "legend",
  "li",
  "link",
  "main",
  "map",
  "mark",
  "menu",
  "meta",
  "meter",
  "nav",
  "noscript",
  "object",
  "ol",
  "optgroup",
  "option",
  "output",
  "p",
  "picture",
  "pre",
  "progress",
  "q",
  "rp",
  "rt",
  "ruby",
  "s",
  "samp",
  "script",
  "section",
  "select",
  "slot",
  "small",
  "source",
  "span",
  "strong",
  "style",
  "sub",
  "summary",
  "sup",
  "table",
  "tbody",
  "td",
  "template",
  "textarea",
  "tfoot",
  "th",
  "thead",
  "time",
  "title",
  "tr",
  "track",
  "u",
  "ul",
  "var",
  "video",
  "wbr"
];
var HOST_SVG_COMPONENT_TYPES = [
  "a",
  "animate",
  "animateMotion",
  "animateTransform",
  "circle",
  "clipPath",
  "defs",
  "desc",
  "discard",
  "ellipse",
  "feBlend",
  "feColorMatrix",
  "feComponentTransfer",
  "feComposite",
  "feConvolveMatrix",
  "feDiffuseLighting",
  "feDisplacementMap",
  "feDistantLight",
  "feDropShadow",
  "feFlood",
  "feFuncA",
  "feFuncB",
  "feFuncG",
  "feFuncR",
  "feGaussianBlur",
  "feImage",
  "feMerge",
  "feMergeNode",
  "feMorphology",
  "feOffset",
  "fePointLight",
  "feSpecularLighting",
  "feSpotLight",
  "feTile",
  "feTurbulence",
  "filter",
  "foreignObject",
  "g",
  "hatch",
  "hatchpath",
  "image",
  "line",
  "linearGradient",
  "marker",
  "mask",
  "metadata",
  "mpath",
  "path",
  "pattern",
  "polygon",
  "polyline",
  "radialGradient",
  "rect",
  "script",
  "set",
  "stop",
  "style",
  "svg",
  "switch",
  "symbol",
  "text",
  "textPath",
  "title",
  "tspan",
  "use",
  "view"
];
var REACT_BUILD_IN_HOOKS = [
  "use",
  "useActionState",
  "useCallback",
  "useContext",
  "useDebugValue",
  "useDeferredValue",
  "useEffect",
  "useFormStatus",
  "useId",
  "useImperativeHandle",
  "useInsertionEffect",
  "useLayoutEffect",
  "useMemo",
  "useOptimistic",
  "useReducer",
  "useRef",
  "useState",
  "useSyncExternalStore",
  "useTransition"
];
var getDocsUrl = (pluginName) => (ruleName) => {
  if (pluginName === "x") return `${WEBSITE_URL}/docs/rules/${ruleName}`;
  return `${WEBSITE_URL}/docs/rules/${pluginName}-${ruleName}`;
};
var createRuleForPlugin = (pluginName) => utils.ESLintUtils.RuleCreator(getDocsUrl(pluginName));
function tryRequire(id, at = (typeof document === 'undefined' ? require('u' + 'rl').pathToFileURL(__filename).href : (_documentCurrentScript && _documentCurrentScript.tagName.toUpperCase() === 'SCRIPT' && _documentCurrentScript.src || new URL('index.js', document.baseURI).href))) {
  const _require = module__default.default.createRequire(at);
  try {
    return eff.E.right(_require(id));
  } catch {
    return eff.E.left(new Error(`Module '${id}' not found`));
  }
}

// src/get-react-version.ts
function getReactVersion(at = (typeof document === 'undefined' ? require('u' + 'rl').pathToFileURL(__filename).href : (_documentCurrentScript && _documentCurrentScript.tagName.toUpperCase() === 'SCRIPT' && _documentCurrentScript.src || new URL('index.js', document.baseURI).href))) {
  return eff.F.pipe(
    tryRequire("react", at),
    eff.E.filterOrLeft(tsPattern.isMatching({ version: tsPattern.P.string }), eff.F.identity),
    eff.E.map((mod) => mod.version)
  );
}
var CustomHookSchema = valibot.object({
  // TODO: Define the schema for custom Hooks
});
var CustomAttributeSchema = valibot.object({
  /**
   * The name of the attribute in the user-defined component.
   * @example
   * "to"
   */
  name: valibot.string(),
  /**
   * The name of the attribute in the built-in component.
   * @example
   * "href"
   */
  as: valibot.optional(valibot.string()),
  /**
   * Whether the attribute is controlled or not in the user-defined component.
   * @example
   * `true`
   */
  controlled: valibot.optional(valibot.boolean()),
  /**
   * The default value of the attribute in the user-defined component.
   * @example
   * `"/"`
   */
  defaultValue: valibot.optional(valibot.string())
});
var CustomComponentSchema = valibot.object({
  /**
   * The name of the user-defined component.
   * @example
   * "Link"
   */
  name: valibot.string(),
  /**
   * The ESQuery selector to select the component precisely.
   * @example
   * `JSXElement:has(JSXAttribute[name.name='component'][value.value='a'])`
   */
  selector: valibot.optional(valibot.string()),
  /**
   * The name of the built-in component that the user-defined component represents.
   * @example
   * "a"
   */
  as: valibot.optional(valibot.string()),
  /**
   * Pre-defined attributes that are used in the user-defined component.
   * @example
   * `Link` component has a `to` attribute that represents the `href` attribute in the built-in `a` element with a default value of `"/"`.
   */
  attributes: valibot.optional(valibot.array(CustomAttributeSchema))
});
var CustomComponentNormalizedSchema = valibot.object({
  name: valibot.string(),
  as: valibot.optional(valibot.string()),
  attributes: valibot.optional(valibot.array(CustomAttributeSchema), []),
  re: valibot.instance(RegExp),
  selector: valibot.optional(valibot.string())
});
var ESLintReactSettingsSchema = valibot.object({
  /**
   * The source where React is imported from.
   * @description This allows to specify a custom import location for React when not using the official distribution.
   * @default `"react"`
   * @example `"@pika/react"`
   */
  importSource: valibot.optional(valibot.string()),
  /**
   * The identifier that’s used for JSX Element creation.
   * @default `"createElement"`
   */
  jsxPragma: valibot.optional(valibot.string()),
  /**
   * The identifier that’s used for JSX fragment elements.
   * @description This should not be a member expression (i.e. use "Fragment" instead of "React.Fragment").
   * @default `"Fragment"`
   */
  jsxPragmaFrag: valibot.optional(valibot.string()),
  /**
   * The name of the prop that is used for polymorphic components.
   * @description This is used to determine the type of the component.
   * @example `"as"`
   */
  polymorphicPropName: valibot.optional(valibot.string()),
  /**
   * @internal
   */
  strict: valibot.optional(valibot.boolean()),
  /**
   * @internal
   */
  strictImportCheck: valibot.optional(valibot.boolean()),
  /**
   * React version to use, "detect" means auto detect React version from the project’s dependencies.
   * If `importSource` is specified, an equivalent version of React should be provided here.
   * @example `"18.3.1"`
   * @default `"detect"`
   */
  version: valibot.optional(valibot.string()),
  /**
   * An array of user-defined components
   * @description This is used to inform the ESLint React plugins how to treat these components during checks.
   * @example `[{ name: "Link", as: "a", attributes: [{ name: "to", as: "href" }, { name: "rel", defaultValue: "noopener noreferrer" }] }]`
   */
  additionalComponents: valibot.optional(valibot.array(CustomComponentSchema)),
  /**
   * A object of aliases for React built-in hooks.
   * @description ESLint React will recognize these aliases as equivalent to the built-in hooks in all its rules.
   * @example `{ useLayoutEffect: ["useIsomorphicLayoutEffect"] }`
   */
  additionalHooks: valibot.optional(valibot.object({
    use: valibot.optional(valibot.array(valibot.string())),
    useActionState: valibot.optional(valibot.array(valibot.string())),
    useCallback: valibot.optional(valibot.array(valibot.string())),
    useContext: valibot.optional(valibot.array(valibot.string())),
    useDebugValue: valibot.optional(valibot.array(valibot.string())),
    useDeferredValue: valibot.optional(valibot.array(valibot.string())),
    useEffect: valibot.optional(valibot.array(valibot.string())),
    useFormStatus: valibot.optional(valibot.array(valibot.string())),
    useId: valibot.optional(valibot.array(valibot.string())),
    useImperativeHandle: valibot.optional(valibot.array(valibot.string())),
    useInsertionEffect: valibot.optional(valibot.array(valibot.string())),
    useLayoutEffect: valibot.optional(valibot.array(valibot.string())),
    useMemo: valibot.optional(valibot.array(valibot.string())),
    useOptimistic: valibot.optional(valibot.array(valibot.string())),
    useReducer: valibot.optional(valibot.array(valibot.string())),
    useRef: valibot.optional(valibot.array(valibot.string())),
    useState: valibot.optional(valibot.array(valibot.string())),
    useSyncExternalStore: valibot.optional(valibot.array(valibot.string())),
    useTransition: valibot.optional(valibot.array(valibot.string()))
  }))
});
var ESLintSettingsSchema = valibot.optional(
  valibot.object({
    "react-x": valibot.optional(ESLintReactSettingsSchema),
    /** @deprecated Use `react-x` instead */
    reactOptions: valibot.optional(ESLintReactSettingsSchema)
  }),
  {}
);
var DEFAULT_ESLINT_REACT_SETTINGS = {
  additionalHooks: {
    useLayoutEffect: ["useIsomorphicLayoutEffect"]
  },
  polymorphicPropName: "as",
  strictImportCheck: false,
  version: "detect"
};
function unsafeReadSettings(data) {
  return data?.["react-x"] ?? {};
}
var decodeSettings = memoize__default.default((data) => {
  return {
    ...DEFAULT_ESLINT_REACT_SETTINGS,
    ...valibot.parse(ESLintSettingsSchema, data)["react-x"] ?? {}
  };
}, { isEqual: (a, b) => a === b });
var normalizeSettings = memoize__default.default((settings) => {
  const additionalComponents = settings.additionalComponents ?? [];
  return {
    ...settings,
    additionalComponents: additionalComponents.map((component) => ({
      ...component,
      attributes: component.attributes?.map((attr) => ({
        ...attr,
        as: attr.as ?? attr.name
      })) ?? [],
      re: pm__default.default.makeRe(component.name, { fastpaths: true })
    })),
    components: additionalComponents.reduce((acc, component) => {
      const { name, as, attributes = [], selector } = component;
      if (!name || !as || selector || attributes.length > 0) return acc;
      if (!/^[\w-]+$/u.test(name)) return acc;
      return acc.set(name, as);
    }, /* @__PURE__ */ new Map()),
    version: tsPattern.match(settings.version).with(tsPattern.P.union(tsPattern.P.nullish, "", "detect"), () => eff.E.getOrElse(getReactVersion(), eff.F.constant("19.0.0"))).otherwise(eff.F.identity)
  };
}, { isEqual: fastEquals.shallowEqual });
var defineSettings = eff.F.identity;

exports.CustomAttributeSchema = CustomAttributeSchema;
exports.CustomComponentNormalizedSchema = CustomComponentNormalizedSchema;
exports.CustomComponentSchema = CustomComponentSchema;
exports.CustomHookSchema = CustomHookSchema;
exports.DEFAULT_ESLINT_REACT_SETTINGS = DEFAULT_ESLINT_REACT_SETTINGS;
exports.ESLintReactSettingsSchema = ESLintReactSettingsSchema;
exports.ESLintSettingsSchema = ESLintSettingsSchema;
exports.GITHUB_URL = GITHUB_URL;
exports.HOST_HTML_COMPONENT_TYPES = HOST_HTML_COMPONENT_TYPES;
exports.HOST_SVG_COMPONENT_TYPES = HOST_SVG_COMPONENT_TYPES;
exports.NPM_SCOPE = NPM_SCOPE;
exports.REACT_BUILD_IN_HOOKS = REACT_BUILD_IN_HOOKS;
exports.RE_CAMEL_CASE = RE_CAMEL_CASE;
exports.RE_CONSTANT_CASE = RE_CONSTANT_CASE;
exports.RE_JAVASCRIPT_PROTOCOL = RE_JAVASCRIPT_PROTOCOL;
exports.RE_KEBAB_CASE = RE_KEBAB_CASE;
exports.RE_PASCAL_CASE = RE_PASCAL_CASE;
exports.RE_SNAKE_CASE = RE_SNAKE_CASE;
exports.WEBSITE_URL = WEBSITE_URL;
exports.createRuleForPlugin = createRuleForPlugin;
exports.decodeSettings = decodeSettings;
exports.defineSettings = defineSettings;
exports.getReactVersion = getReactVersion;
exports.normalizeSettings = normalizeSettings;
exports.unsafeReadSettings = unsafeReadSettings;
