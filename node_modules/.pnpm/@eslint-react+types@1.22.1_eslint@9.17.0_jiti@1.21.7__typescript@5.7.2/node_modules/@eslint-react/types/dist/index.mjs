// src/helpers.ts
var narrow = (a) => a;
var asConst = (a) => a;
function typeOf(t) {
  return Object.prototype.toString.call(t).replace(/^\[object (.+)\]$/, "$1").toLowerCase();
}
function entries(...args) {
  return Object.entries(args);
}
function fromEntries(...args) {
  return Object.fromEntries(args);
}
function zip(...arrs) {
  const result = [];
  const maxIndex = Math.max(...arrs.map((x) => x.length));
  for (let i = 0; i < maxIndex; i++) {
    const element = [];
    for (const arr of arrs) {
      element.push(arr[i]);
    }
    result.push(element);
  }
  return result;
}

export { asConst, entries, fromEntries, narrow, typeOf, zip };
