'use strict';

var core = require('@eslint-react/core');
var eff = require('@eslint-react/eff');
var shared = require('@eslint-react/shared');
var utils = require('@typescript-eslint/utils');

// package.json
var name = "eslint-plugin-react-debug";
var version = "1.22.1";
var createRule = shared.createRuleForPlugin("debug");

// src/rules/class-component.ts
var RULE_NAME = "class-component";
var RULE_FEATURES = [
  "DBG"
];
var class_component_default = createRule({
  meta: {
    type: "problem",
    docs: {
      // eslint-disable-next-line eslint-plugin/require-meta-docs-description
      description: "report all class components, including anonymous ones",
      [Symbol.for("rule_features")]: RULE_FEATURES
    },
    messages: {
      classComponent: "[class component] name: {{name}}."
    },
    schema: []
  },
  name: RULE_NAME,
  create(context) {
    const { ctx, listeners } = core.useComponentCollectorLegacy();
    return {
      ...listeners,
      "Program:exit"(node) {
        const components = ctx.getAllComponents(node);
        for (const { name: name2, node: component } of components.values()) {
          context.report({
            messageId: "classComponent",
            node: component,
            data: {
              name: eff.O.getOrElse(eff.F.constant("anonymous"))(name2)
            }
          });
        }
      }
    };
  },
  defaultOptions: []
});
var RULE_NAME2 = "function-component";
var RULE_FEATURES2 = [
  "DBG"
];
var function_component_default = createRule({
  meta: {
    type: "problem",
    docs: {
      // eslint-disable-next-line eslint-plugin/require-meta-docs-description
      description: "report all function components, including anonymous ones",
      [Symbol.for("rule_features")]: RULE_FEATURES2
    },
    messages: {
      functionComponent: "[function component] name: {{name}}, memo: {{memo}}, forwardRef: {{forwardRef}}, hookCalls: {{hookCalls}}"
    },
    schema: []
  },
  name: RULE_NAME2,
  create(context) {
    const { ctx, listeners } = core.useComponentCollector(context);
    return {
      ...listeners,
      "Program:exit"(node) {
        const components = ctx.getAllComponents(node);
        for (const { name: name2, node: node2, flag, hookCalls } of components.values()) {
          context.report({
            messageId: "functionComponent",
            node: node2,
            data: {
              name: eff.O.getOrElse(name2, eff.F.constant("anonymous")),
              forwardRef: Boolean(flag & core.ERFunctionComponentFlag.ForwardRef),
              hookCalls: hookCalls.length,
              memo: Boolean(flag & core.ERFunctionComponentFlag.Memo)
            }
          });
        }
      }
    };
  },
  defaultOptions: []
});
var RULE_NAME3 = "hook";
var RULE_FEATURES3 = [
  "DBG"
];
var hook_default = createRule({
  meta: {
    type: "problem",
    docs: {
      // eslint-disable-next-line eslint-plugin/require-meta-docs-description
      description: "report all React Hooks",
      [Symbol.for("rule_features")]: RULE_FEATURES3
    },
    messages: {
      hook: "[hook] name: {{name}}, hookCalls: {{hookCalls}}."
    },
    schema: []
  },
  name: RULE_NAME3,
  create(context) {
    const { ctx, listeners } = core.useHookCollector();
    return {
      ...listeners,
      "Program:exit"(node) {
        const allHooks = ctx.getAllHooks(node);
        for (const { name: name2, node: node2, hookCalls } of allHooks.values()) {
          context.report({
            messageId: "hook",
            node: node2,
            data: {
              name: name2.value,
              hookCalls: hookCalls.length
            }
          });
        }
      }
    };
  },
  defaultOptions: []
});
var RULE_NAME4 = "is-from-react";
var RULE_FEATURES4 = [
  "DBG"
];
var is_from_react_default = createRule({
  meta: {
    type: "problem",
    docs: {
      // eslint-disable-next-line eslint-plugin/require-meta-docs-description
      description: "report all identifiers that are initialized from React.",
      [Symbol.for("rule_features")]: RULE_FEATURES4
    },
    messages: {
      isFromReact: "[initialized from react] name: '{{name}}', import source: '{{importSource}}'."
    },
    schema: []
  },
  name: RULE_NAME4,
  create(context) {
    const settings = shared.decodeSettings(context.settings);
    const finalSettings = {
      ...settings,
      strictImportCheck: true
    };
    function isFromReact(node, initialScope) {
      const name2 = node.name;
      switch (true) {
        case (node.parent.type === utils.AST_NODE_TYPES.MemberExpression && node.parent.property === node && node.parent.object.type === utils.AST_NODE_TYPES.Identifier):
          return core.isInitializedFromReact(node.parent.object.name, initialScope, finalSettings);
        case (node.parent.type === utils.AST_NODE_TYPES.JSXMemberExpression && node.parent.property === node && node.parent.object.type === utils.AST_NODE_TYPES.JSXIdentifier):
          return core.isInitializedFromReact(node.parent.object.name, initialScope, finalSettings);
        default:
          return core.isInitializedFromReact(name2, initialScope, finalSettings);
      }
    }
    function getReportDescriptor(node) {
      const shouldSkipDuplicate = node.parent.type === utils.AST_NODE_TYPES.ImportSpecifier && node.parent.imported === node && node.parent.imported.name === node.parent.local.name;
      if (shouldSkipDuplicate) return eff.O.none();
      const name2 = node.name;
      const initialScope = context.sourceCode.getScope(node);
      if (!isFromReact(node, initialScope)) return eff.O.none();
      return eff.O.some({
        messageId: "isFromReact",
        node,
        data: {
          type: node.type,
          name: name2,
          importSource: settings.importSource ?? "react"
        }
      });
    }
    return {
      Identifier: eff.F.flow(getReportDescriptor, eff.O.map(context.report)),
      JSXIdentifier: eff.F.flow(getReportDescriptor, eff.O.map(context.report))
    };
  },
  defaultOptions: []
});

// src/index.ts
var index_default = {
  meta: {
    name,
    version
  },
  rules: {
    "class-component": class_component_default,
    "function-component": function_component_default,
    hook: hook_default,
    "is-from-react": is_from_react_default,
    // Part: deprecated rules
    /** @deprecated Use `hook` instead */
    "react-hooks": hook_default
  }
};

module.exports = index_default;
