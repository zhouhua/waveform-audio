'use strict';

var AST = require('@eslint-react/ast');
var eff = require('@eslint-react/eff');
var scopeManager = require('@typescript-eslint/scope-manager');
var types = require('@typescript-eslint/types');
var tsPattern = require('ts-pattern');
var ASTUtils = require('@typescript-eslint/utils/ast-utils');

function _interopNamespace(e) {
  if (e && e.__esModule) return e;
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () { return e[k]; }
        });
      }
    });
  }
  n.default = e;
  return Object.freeze(n);
}

var AST__namespace = /*#__PURE__*/_interopNamespace(AST);
var ASTUtils__namespace = /*#__PURE__*/_interopNamespace(ASTUtils);

// src/construction.ts
var Construction = eff.Data.taggedEnum();
var ConstructionHint = {
  None: 0n,
  StrictCallExpression: 1n << 0n
};
function inspectConstruction(node, initialScope, hint = ConstructionHint.None) {
  const detect = (node2) => {
    return tsPattern.match(node2).when(AST__namespace.is(types.AST_NODE_TYPES.ArrayExpression), (node3) => Construction.Array({ node: node3, usage: eff.O.none() })).when(AST__namespace.is(types.AST_NODE_TYPES.ObjectExpression), (node3) => Construction.ObjectExpression({ node: node3, usage: eff.O.none() })).when(AST__namespace.is(types.AST_NODE_TYPES.ClassExpression), (node3) => Construction.ClassExpression({ node: node3, usage: eff.O.none() })).when(AST__namespace.is(types.AST_NODE_TYPES.JSXElement), (node3) => Construction.JSXElement({ node: node3, usage: eff.O.none() })).when(AST__namespace.is(types.AST_NODE_TYPES.JSXFragment), (node3) => Construction.JSXFragment({ node: node3, usage: eff.O.none() })).when(AST__namespace.is(types.AST_NODE_TYPES.CallExpression), (node3) => {
      if (hint & ConstructionHint.StrictCallExpression) {
        return Construction.CallExpression({ node: node3, usage: eff.O.none() });
      }
      return Construction.None();
    }).when(AST__namespace.is(types.AST_NODE_TYPES.NewExpression), (node3) => Construction.NewExpression({ node: node3, usage: eff.O.none() })).when(
      AST__namespace.isOneOf([
        types.AST_NODE_TYPES.FunctionExpression,
        types.AST_NODE_TYPES.ArrowFunctionExpression
      ]),
      (node3) => {
        return Construction.FunctionExpression({ node: node3, usage: eff.O.none() });
      }
    ).when(AST__namespace.is(types.AST_NODE_TYPES.MemberExpression), (node3) => {
      if (!("object" in node3)) return Construction.None();
      const object = detect(node3.object);
      if (object._tag === "None") return object;
      return {
        ...object,
        usage: eff.O.some(node3.object)
      };
    }).when(AST__namespace.is(types.AST_NODE_TYPES.AssignmentExpression), (node3) => {
      if (!("right" in node3)) return Construction.None();
      const right = detect(node3.right);
      if (right._tag === "None") return right;
      return Construction.AssignmentExpression({
        node: right.node,
        usage: eff.O.some(node3)
      });
    }).when(AST__namespace.is(types.AST_NODE_TYPES.AssignmentPattern), (node3) => {
      if (!("right" in node3)) return Construction.None();
      const right = detect(node3.right);
      if (right._tag === "None") return right;
      return Construction.AssignmentPattern({
        node: right.node,
        usage: eff.O.some(node3)
      });
    }).when(AST__namespace.is(types.AST_NODE_TYPES.LogicalExpression), (node3) => {
      if (!("left" in node3 && "right" in node3)) return Construction.None();
      const left = detect(node3.left);
      if (left._tag !== "None") return left;
      return detect(node3.right);
    }).when(AST__namespace.is(types.AST_NODE_TYPES.ConditionalExpression), (node3) => {
      if (!("consequent" in node3 && "alternate" in node3 && !eff.isNullable(node3.alternate))) {
        return Construction.None();
      }
      const consequent = detect(node3.consequent);
      if (consequent._tag !== "None") return Construction.None();
      return detect(node3.alternate);
    }).when(AST__namespace.is(types.AST_NODE_TYPES.Identifier), (node3) => {
      if (!("name" in node3 && eff.isString(node3.name))) return Construction.None();
      const maybeLatestDef = eff.O.fromNullable(initialScope.set.get(node3.name)?.defs.at(-1));
      if (eff.O.isNone(maybeLatestDef)) return Construction.None();
      const latestDef = maybeLatestDef.value;
      if (latestDef.type !== scopeManager.DefinitionType.Variable && latestDef.type !== scopeManager.DefinitionType.FunctionName) {
        return Construction.None();
      }
      if (latestDef.node.type === types.AST_NODE_TYPES.FunctionDeclaration) {
        return Construction.FunctionDeclaration({
          node: latestDef.node,
          usage: eff.O.some(node3)
        });
      }
      if (!("init" in latestDef.node) || latestDef.node.init === null) {
        return Construction.None();
      }
      return detect(latestDef.node.init);
    }).when(AST__namespace.is(types.AST_NODE_TYPES.Literal), (node3) => {
      if ("regex" in node3) {
        return Construction.RegExpLiteral({ node: node3, usage: eff.O.none() });
      }
      return Construction.None();
    }).when(
      AST__namespace.isOneOf([
        types.AST_NODE_TYPES.TSAsExpression,
        types.AST_NODE_TYPES.TSTypeAssertion
      ]),
      () => {
        if (!("expression" in node2) || !eff.isObject(node2.expression)) {
          return Construction.None();
        }
        return detect(node2.expression);
      }
    ).otherwise(() => Construction.None());
  };
  return detect(node);
}
var findVariable2 = eff.F.dual(2, (nameOrNode, initialScope) => {
  return eff.O.fromNullable(ASTUtils__namespace.findVariable(initialScope, nameOrNode));
});

// src/get-child-scopes.ts
function getChidScopes(scope, prev = []) {
  return [scope, ...scope.childScopes.reduce((acc, prev2) => getChidScopes(prev2, [...acc, prev2]), prev)];
}
function getScope(node, scopeManager) {
  const { type, parent } = node;
  const inner = type !== types.AST_NODE_TYPES.Program;
  const scope = scopeManager.acquire(node, inner);
  if (scope) return scope;
  if (parent) return getScope(parent, scopeManager);
  return null;
}
function getStaticValue2(node, initialScope) {
  return eff.F.pipe(
    eff.O.fromNullable(ASTUtils__namespace.getStaticValue(node, initialScope)),
    eff.O.map((v) => v.value)
  );
}
function getVariableDeclaratorID(node, prev) {
  switch (true) {
    case (node.type === types.AST_NODE_TYPES.VariableDeclarator && node.init === prev):
      return eff.O.some(node.id);
    case (node.type === types.AST_NODE_TYPES.AssignmentExpression && node.right === prev):
      return eff.O.some(node.left);
    case (node.type === types.AST_NODE_TYPES.BlockStatement || node.type === types.AST_NODE_TYPES.Program || node.parent === node):
      return eff.O.none();
    default:
      return getVariableDeclaratorID(node.parent, node);
  }
}
function getVariableNode(at) {
  return (variable) => {
    return eff.F.pipe(
      eff.O.some(variable),
      eff.O.flatMapNullable((v) => v.defs.at(at)),
      eff.O.flatMapNullable((def) => {
        switch (true) {
          case (def.type === scopeManager.DefinitionType.FunctionName && def.node.type === types.AST_NODE_TYPES.FunctionDeclaration):
            return def.node;
          case (def.type === scopeManager.DefinitionType.ClassName && def.node.type === types.AST_NODE_TYPES.ClassDeclaration):
            return def.node;
          case (def.type === scopeManager.DefinitionType.Parameter && AST__namespace.isFunction(def.node)):
            return def.node;
          case ("init" in def.node && def.node.init && !("declarations" in def.node.init)):
            return def.node.init;
          default:
            return null;
        }
      })
    );
  };
}
function getVariables(initialScope) {
  let scope = initialScope;
  const variables = [...scope.variables];
  while (scope.type !== scopeManager.ScopeType.global) {
    scope = scope.upper;
    variables.push(...scope.variables);
  }
  return variables.reverse();
}
function isInitializedFromSource(name, source, initialScope) {
  const maybeLatestDef = eff.O.flatMapNullable(findVariable2(name, initialScope), (v) => v.defs.at(-1));
  if (eff.O.isNone(maybeLatestDef)) return false;
  const { node, parent } = maybeLatestDef.value;
  if (node.type === types.AST_NODE_TYPES.VariableDeclarator && node.init) {
    const { init } = node;
    if (init.type === types.AST_NODE_TYPES.MemberExpression && init.object.type === types.AST_NODE_TYPES.Identifier) {
      return isInitializedFromSource(init.object.name, source, initialScope);
    }
    if (init.type === types.AST_NODE_TYPES.Identifier) {
      return isInitializedFromSource(init.name, source, initialScope);
    }
    return eff.F.pipe(
      getRequireExpressionArguments(init),
      eff.O.flatMapNullable((args) => args[0]),
      eff.O.filter(AST__namespace.isStringLiteral),
      // check for: `require('source')` or `require('source/...')`
      eff.O.exists((arg) => arg.value === source || arg.value.startsWith(`${source}/`))
    );
  }
  return tsPattern.isMatching({ type: "ImportDeclaration", source: { value: source } }, parent);
}
function getRequireExpressionArguments(node) {
  switch (true) {
    // require('source')
    case (node.type === types.AST_NODE_TYPES.CallExpression && node.callee.type === types.AST_NODE_TYPES.Identifier && node.callee.name === "require"): {
      return eff.O.some(node.arguments);
    }
    // require('source').variable
    case node.type === types.AST_NODE_TYPES.MemberExpression: {
      return getRequireExpressionArguments(node.object);
    }
  }
  return eff.O.none();
}
var thisBlockTypes = [
  types.AST_NODE_TYPES.FunctionDeclaration,
  types.AST_NODE_TYPES.FunctionExpression,
  types.AST_NODE_TYPES.ClassBody,
  types.AST_NODE_TYPES.Program
];
function isNodeValueEqual(a, b, initialScopes) {
  const [aScope, bScope] = initialScopes;
  switch (true) {
    case (a.type === types.AST_NODE_TYPES.Literal && b.type === types.AST_NODE_TYPES.Literal): {
      return a.value === b.value;
    }
    case (a.type === types.AST_NODE_TYPES.TemplateElement && b.type === types.AST_NODE_TYPES.TemplateElement): {
      return a.value.cooked === b.value.cooked;
    }
    case (a.type === types.AST_NODE_TYPES.Identifier && b.type === types.AST_NODE_TYPES.Identifier): {
      const aVar = findVariable2(a, aScope);
      const bVar = findVariable2(b, bScope);
      const aVarNode = eff.O.flatMap(aVar, getVariableNode(0));
      const bVarNode = eff.O.flatMap(bVar, getVariableNode(0));
      const aVarNodeParent = eff.O.flatMapNullable(aVarNode, (n) => n.parent);
      const bVarNodeParent = eff.O.flatMapNullable(bVarNode, (n) => n.parent);
      const aDef = eff.O.flatMapNullable(aVar, (v) => v.defs.at(0));
      const bDef = eff.O.flatMapNullable(bVar, (v) => v.defs.at(0));
      const aDefParentParent = eff.O.flatMapNullable(aDef, (d) => d.parent?.parent);
      const bDefParentParent = eff.O.flatMapNullable(bDef, (d) => d.parent?.parent);
      switch (true) {
        case (eff.O.exists(aVarNodeParent, AST__namespace.is(types.AST_NODE_TYPES.CallExpression)) && eff.O.exists(bVarNodeParent, AST__namespace.is(types.AST_NODE_TYPES.CallExpression)) && eff.O.exists(aVarNode, AST__namespace.isFunction) && eff.O.exists(bVarNode, AST__namespace.isFunction)): {
          const hasSameCallee = eff.F.pipe(
            eff.O.Do,
            eff.O.bind("aCallee", () => eff.O.map(aVarNodeParent, (n) => n.callee)),
            eff.O.bind("bCallee", () => eff.O.map(bVarNodeParent, (n) => n.callee)),
            eff.O.exists(({ aCallee, bCallee }) => AST__namespace.isNodeEqual(aCallee, bCallee))
          );
          if (!hasSameCallee) return false;
          return eff.F.pipe(
            eff.O.Do,
            eff.O.bind("aParams", () => eff.O.map(aVarNode, (n) => n.params)),
            eff.O.bind("bParams", () => eff.O.map(bVarNode, (n) => n.params)),
            eff.O.let("aPos", ({ aParams }) => aParams.findIndex(AST__namespace.isNodeEqual(a))),
            eff.O.let("bPos", ({ bParams }) => bParams.findIndex(AST__namespace.isNodeEqual(b))),
            eff.O.filter(({ aPos, bPos }) => aPos !== -1 && bPos !== -1),
            eff.O.exists(({ aPos, bPos }) => aPos === bPos)
          );
        }
        case (eff.O.exists(aDefParentParent, AST__namespace.is(types.AST_NODE_TYPES.ForOfStatement)) && eff.O.exists(bDefParentParent, AST__namespace.is(types.AST_NODE_TYPES.ForOfStatement))): {
          return eff.F.pipe(
            eff.O.Do,
            eff.O.bind("aLeft", () => eff.O.map(aDefParentParent, (d) => d.left)),
            eff.O.bind("bLeft", () => eff.O.map(bDefParentParent, (d) => d.left)),
            eff.O.filter(({ aLeft, bLeft }) => aLeft.type === bLeft.type),
            eff.O.bind("aRight", () => eff.O.map(aDefParentParent, (d) => d.right)),
            eff.O.bind("bRight", () => eff.O.map(bDefParentParent, (d) => d.right)),
            eff.O.exists(({ aRight, bRight }) => AST__namespace.isNodeEqual(aRight, bRight))
          );
        }
        default: {
          return eff.O.isSome(aVar) && eff.O.isSome(bVar) && eff.Equal.equals(aVar, bVar);
        }
      }
    }
    case (a.type === types.AST_NODE_TYPES.MemberExpression && b.type === types.AST_NODE_TYPES.MemberExpression): {
      return AST__namespace.isNodeEqual(a.property, b.property) && isNodeValueEqual(a.object, b.object, initialScopes);
    }
    case (a.type === types.AST_NODE_TYPES.ThisExpression && b.type === types.AST_NODE_TYPES.ThisExpression): {
      if (aScope.block === bScope.block) return true;
      return eff.F.pipe(
        eff.O.Do,
        eff.O.bind("aFunction", () => AST__namespace.traverseUp(a, AST__namespace.isOneOf(thisBlockTypes))),
        eff.O.bind("bFunction", () => AST__namespace.traverseUp(b, AST__namespace.isOneOf(thisBlockTypes))),
        eff.O.exists(({ aFunction, bFunction }) => aFunction === bFunction)
      );
    }
    default: {
      return eff.F.pipe(
        eff.O.Do,
        eff.O.bind("aStatic", () => getStaticValue2(a, aScope)),
        eff.O.bind("bStatic", () => getStaticValue2(b, bScope)),
        eff.O.exists(({ aStatic, bStatic }) => aStatic === bStatic)
      );
    }
  }
}

exports.Construction = Construction;
exports.ConstructionHint = ConstructionHint;
exports.findVariable = findVariable2;
exports.getChidScopes = getChidScopes;
exports.getScope = getScope;
exports.getStaticValue = getStaticValue2;
exports.getVariableDeclaratorID = getVariableDeclaratorID;
exports.getVariableNode = getVariableNode;
exports.getVariables = getVariables;
exports.inspectConstruction = inspectConstruction;
exports.isInitializedFromSource = isInitializedFromSource;
exports.isNodeValueEqual = isNodeValueEqual;
