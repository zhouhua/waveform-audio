import { or, F, O, isString } from '@eslint-react/eff';
import { AST_NODE_TYPES } from '@typescript-eslint/types';
import { ASTUtils } from '@typescript-eslint/utils';
import { isMatching, P, match } from 'ts-pattern';
import { AST_NODE_TYPES as AST_NODE_TYPES$1, simpleTraverse } from '@typescript-eslint/typescript-estree';
import { zip } from '@eslint-react/types';
import { toLowerCase, delimiterCase, replace } from 'string-ts';

// src/function-init-path.ts
function getFunctionInitPath(node) {
  const { parent } = node;
  if (node.type === AST_NODE_TYPES.FunctionDeclaration) return O.some([node]);
  if (parent.type === AST_NODE_TYPES.VariableDeclarator) {
    return O.some([
      parent.parent,
      parent,
      node
    ]);
  }
  if (parent.type === AST_NODE_TYPES.CallExpression && parent.parent.type === AST_NODE_TYPES.VariableDeclarator) {
    return O.some([
      parent.parent.parent,
      parent.parent,
      parent,
      node
    ]);
  }
  if (parent.type === AST_NODE_TYPES.CallExpression && parent.parent.type === AST_NODE_TYPES.CallExpression && parent.parent.parent.type === AST_NODE_TYPES.VariableDeclarator) {
    return O.some([
      parent.parent.parent.parent,
      parent.parent.parent,
      parent.parent,
      parent,
      node
    ]);
  }
  if (parent.type === AST_NODE_TYPES.Property && parent.parent.type === AST_NODE_TYPES.ObjectExpression && parent.parent.parent.type === AST_NODE_TYPES.VariableDeclarator) {
    return O.some([
      parent.parent.parent.parent,
      parent.parent.parent,
      parent.parent,
      parent,
      node
    ]);
  }
  if (parent.type === AST_NODE_TYPES.MethodDefinition && parent.parent.parent.type === AST_NODE_TYPES.ClassDeclaration) {
    return O.some([
      parent.parent.parent,
      parent.parent,
      parent,
      node
    ]);
  }
  if (parent.type === AST_NODE_TYPES.PropertyDefinition && parent.parent.parent.type === AST_NODE_TYPES.ClassDeclaration) {
    return O.some([
      parent.parent.parent,
      parent.parent,
      parent,
      node
    ]);
  }
  return O.none();
}
function hasCallInFunctionInitPath(callName) {
  return (initPath) => {
    return F.pipe(
      initPath,
      O.filter((p) => p.length > 0),
      O.exists((nodes) => {
        return nodes.some(
          // TODO: Re-evaluate dot notation callName
          // callName.includes(".")
          //   ? n => {
          //     const [objectName, propertyName] = callName.split(".");
          //     return "callee" in n
          //       && n.callee.type === AST_NODE_TYPES.MemberExpression
          //       && n.callee.object.type === AST_NODE_TYPES.Identifier
          //       && n.callee.object.name === objectName
          //       && n.callee.property.type === AST_NODE_TYPES.Identifier
          //       && n.callee.property.name === propertyName;
          //   }
          //   : n => {
          //     return "callee" in n
          //       && n.callee.type === AST_NODE_TYPES.Identifier
          //       && n.callee.name === callName;
          //   },
          (n) => {
            if (n.type !== AST_NODE_TYPES.CallExpression) return false;
            if (n.callee.type === AST_NODE_TYPES.Identifier) return n.callee.name === callName;
            return "property" in n.callee && "name" in n.callee.property && n.callee.property.name === callName;
          }
        );
      })
    );
  };
}
function getClassIdentifier(node) {
  if (node.id) return O.fromNullable(node.id);
  if (node.parent.type === AST_NODE_TYPES.VariableDeclarator && node.parent.id.type === AST_NODE_TYPES.Identifier) {
    return O.fromNullable(node.parent.id);
  }
  return O.none();
}
var is = ASTUtils.isNodeOfType;
var isOneOf = ASTUtils.isNodeOfTypes;
var isFunction = isOneOf([
  AST_NODE_TYPES.ArrowFunctionExpression,
  AST_NODE_TYPES.FunctionDeclaration,
  AST_NODE_TYPES.FunctionExpression
]);
var isFunctionType = isOneOf([
  AST_NODE_TYPES.ArrowFunctionExpression,
  AST_NODE_TYPES.FunctionDeclaration,
  AST_NODE_TYPES.FunctionExpression,
  AST_NODE_TYPES.TSCallSignatureDeclaration,
  AST_NODE_TYPES.TSConstructSignatureDeclaration,
  AST_NODE_TYPES.TSDeclareFunction,
  AST_NODE_TYPES.TSEmptyBodyFunctionExpression,
  AST_NODE_TYPES.TSFunctionType,
  AST_NODE_TYPES.TSMethodSignature
]);
var isClass = isOneOf([AST_NODE_TYPES.ClassDeclaration, AST_NODE_TYPES.ClassExpression]);
var isLoop = isOneOf([
  AST_NODE_TYPES.DoWhileStatement,
  AST_NODE_TYPES.ForInStatement,
  AST_NODE_TYPES.ForOfStatement,
  AST_NODE_TYPES.ForStatement,
  AST_NODE_TYPES.WhileStatement
]);
var isControlFlow = or(
  isLoop,
  isOneOf([
    AST_NODE_TYPES.IfStatement,
    AST_NODE_TYPES.SwitchStatement
  ])
);
var isConditional = or(
  isControlFlow,
  isOneOf([
    AST_NODE_TYPES.LogicalExpression,
    AST_NODE_TYPES.ConditionalExpression
  ])
);
var isArrayTupleType = isOneOf([AST_NODE_TYPES.TSArrayType, AST_NODE_TYPES.TSTupleType]);
var isProperty = isOneOf([
  AST_NODE_TYPES.PropertyDefinition,
  AST_NODE_TYPES.TSIndexSignature,
  AST_NODE_TYPES.TSParameterProperty,
  AST_NODE_TYPES.TSPropertySignature
]);
var isJSXElement = is(AST_NODE_TYPES.JSXElement);
var isJSXFragment = is(AST_NODE_TYPES.JSXFragment);
var isJSX = isOneOf([
  AST_NODE_TYPES.JSXAttribute,
  AST_NODE_TYPES.JSXSpreadChild,
  AST_NODE_TYPES.JSXClosingElement,
  AST_NODE_TYPES.JSXClosingFragment,
  AST_NODE_TYPES.JSXElement,
  AST_NODE_TYPES.JSXEmptyExpression,
  AST_NODE_TYPES.JSXExpressionContainer,
  AST_NODE_TYPES.JSXFragment,
  AST_NODE_TYPES.JSXIdentifier,
  AST_NODE_TYPES.JSXMemberExpression,
  AST_NODE_TYPES.JSXNamespacedName,
  AST_NODE_TYPES.JSXOpeningElement,
  AST_NODE_TYPES.JSXOpeningFragment,
  AST_NODE_TYPES.JSXSpreadAttribute,
  AST_NODE_TYPES.JSXSpreadChild,
  AST_NODE_TYPES.JSXText
]);
var isJSXTagNameExpression = isOneOf([
  AST_NODE_TYPES.JSXIdentifier,
  AST_NODE_TYPES.JSXMemberExpression,
  AST_NODE_TYPES.JSXNamespacedName
]);
var isDestructuringPattern = isOneOf([
  AST_NODE_TYPES.ArrayPattern,
  AST_NODE_TYPES.AssignmentPattern,
  AST_NODE_TYPES.ObjectPattern,
  AST_NODE_TYPES.RestElement
]);
var isTypeDeclaration = isOneOf([
  AST_NODE_TYPES.TSInterfaceDeclaration,
  AST_NODE_TYPES.TSTypeAliasDeclaration
]);
var isLeftHandSideExpression = isOneOf([
  AST_NODE_TYPES.ArrayExpression,
  AST_NODE_TYPES.ArrayPattern,
  AST_NODE_TYPES.ArrowFunctionExpression,
  AST_NODE_TYPES.CallExpression,
  AST_NODE_TYPES.ClassExpression,
  AST_NODE_TYPES.FunctionExpression,
  AST_NODE_TYPES.Identifier,
  AST_NODE_TYPES.JSXElement,
  AST_NODE_TYPES.JSXFragment,
  AST_NODE_TYPES.Literal,
  AST_NODE_TYPES.TemplateLiteral,
  AST_NODE_TYPES.MemberExpression,
  AST_NODE_TYPES.MetaProperty,
  AST_NODE_TYPES.ObjectExpression,
  AST_NODE_TYPES.ObjectPattern,
  AST_NODE_TYPES.SequenceExpression,
  AST_NODE_TYPES.Super,
  AST_NODE_TYPES.TaggedTemplateExpression,
  AST_NODE_TYPES.ThisExpression
]);
var isLeftHandSideExpressionType = isOneOf([
  AST_NODE_TYPES.ArrayExpression,
  AST_NODE_TYPES.ArrayPattern,
  AST_NODE_TYPES.ArrowFunctionExpression,
  AST_NODE_TYPES.CallExpression,
  AST_NODE_TYPES.ClassExpression,
  AST_NODE_TYPES.FunctionExpression,
  AST_NODE_TYPES.Identifier,
  AST_NODE_TYPES.JSXElement,
  AST_NODE_TYPES.JSXFragment,
  AST_NODE_TYPES.Literal,
  AST_NODE_TYPES.TemplateLiteral,
  AST_NODE_TYPES.MemberExpression,
  AST_NODE_TYPES.MetaProperty,
  AST_NODE_TYPES.ObjectExpression,
  AST_NODE_TYPES.ObjectPattern,
  AST_NODE_TYPES.SequenceExpression,
  AST_NODE_TYPES.Super,
  AST_NODE_TYPES.TaggedTemplateExpression,
  AST_NODE_TYPES.ThisExpression,
  AST_NODE_TYPES.TSAsExpression,
  AST_NODE_TYPES.TSNonNullExpression,
  AST_NODE_TYPES.TSTypeAssertion
]);

// src/get-function-identifier.ts
function getFunctionIdentifier(node) {
  switch (true) {
    // function MaybeComponent() {}
    case ("id" in node && !!node.id):
      return O.some(node.id);
    // const whatever = function MaybeComponent() {};
    case (node.parent.type === AST_NODE_TYPES.VariableDeclarator && node.parent.init === node && node.parent.id.type === AST_NODE_TYPES.Identifier):
      return O.some(node.parent.id);
    // MaybeComponent = () => {};
    case (node.parent.type === AST_NODE_TYPES.AssignmentExpression && node.parent.right === node && node.parent.operator === "=" && node.parent.left.type === AST_NODE_TYPES.Identifier):
      return O.some(node.parent.left);
    // {MaybeComponent: () => {}}
    // {MaybeComponent() {}}
    case (node.parent.type === AST_NODE_TYPES.Property && node.parent.value === node && !node.parent.computed && node.parent.key.type === AST_NODE_TYPES.Identifier):
      return O.some(node.parent.key);
    // class {MaybeComponent = () => {}}
    // class {MaybeComponent() {}}
    case (isOneOf([AST_NODE_TYPES.MethodDefinition, AST_NODE_TYPES.PropertyDefinition])(node.parent) && node.parent.value === node && node.parent.key.type === AST_NODE_TYPES.Identifier):
      return O.some(node.parent.key);
    // Follow spec convention for `IsAnonymousFunctionDefinition()` usage.
    //
    // const {MaybeComponent = () => {}} = {};
    // ({MaybeComponent = () => {}} = {});
    case (node.parent.type === AST_NODE_TYPES.AssignmentPattern && node.parent.right === node && node.parent.left.type === AST_NODE_TYPES.Identifier):
      return O.some(node.parent.left);
    // const MaybeComponent = (() => {}) as FunctionComponent;
    // const MaybeComponent = (() => {}) satisfies FunctionComponent;
    case isOneOf([AST_NODE_TYPES.TSAsExpression, AST_NODE_TYPES.TSSatisfiesExpression])(node.parent):
      return getFunctionIdentifier(node.parent);
  }
  return O.none();
}
function getIdentifiersFromBinaryExpression(side) {
  if (side.type === AST_NODE_TYPES.Identifier) return [side];
  if (side.type === AST_NODE_TYPES.BinaryExpression) {
    return [
      ...getIdentifiersFromBinaryExpression(side.left),
      ...getIdentifiersFromBinaryExpression(side.right)
    ];
  }
  return [];
}
function getLiteralValueType(input) {
  return match(input).with(null, () => "Null").with(P.boolean, () => "Boolean").with(P.number, () => "Number").with(P.string, () => "String").with(P.bigint, () => "BigInt").with(P.symbol, () => "Symbol").exhaustive();
}
function getNestedExpressionsOfType(type) {
  const isNodeOfType = ASTUtils.isNodeOfType(type);
  return function(node) {
    const boundGetNestedExpressionsOfType = getNestedExpressionsOfType(type);
    const expressions = [];
    if (isNodeOfType(node)) {
      expressions.push(node);
    }
    if ("arguments" in node) {
      const chunk = node.arguments.map(getNestedExpressionsOfType(type)).flat(1);
      expressions.push(...chunk);
    }
    if ("expression" in node && node.expression !== true && node.expression !== false) {
      const chunk = boundGetNestedExpressionsOfType(node.expression);
      expressions.push(...chunk);
    }
    if ("left" in node) {
      const chunk = boundGetNestedExpressionsOfType(node.left);
      expressions.push(...chunk);
    }
    if ("right" in node) {
      const chunk = boundGetNestedExpressionsOfType(node.right);
      expressions.push(...chunk);
    }
    if ("test" in node && node.test !== null) {
      const chunk = boundGetNestedExpressionsOfType(node.test);
      expressions.push(...chunk);
    }
    if ("consequent" in node) {
      const chunk = Array.isArray(node.consequent) ? node.consequent.map(boundGetNestedExpressionsOfType).flat(1) : boundGetNestedExpressionsOfType(node.consequent);
      expressions.push(...chunk);
    }
    if ("alternate" in node && node.alternate !== null) {
      const chunk = Array.isArray(node.alternate) ? node.alternate.map(boundGetNestedExpressionsOfType).flat(1) : boundGetNestedExpressionsOfType(node.alternate);
      expressions.push(...chunk);
    }
    if ("elements" in node) {
      const chunk = node.elements.filter((x) => x !== null).map(getNestedExpressionsOfType(type)).flat(1);
      expressions.push(...chunk);
    }
    if ("properties" in node) {
      const chunk = node.properties.map(boundGetNestedExpressionsOfType).flat(1);
      expressions.push(...chunk);
    }
    if ("expressions" in node) {
      const chunk = node.expressions.map(boundGetNestedExpressionsOfType).flat(1);
      expressions.push(...chunk);
    }
    if (node.type === AST_NODE_TYPES$1.Property) {
      const chunk = boundGetNestedExpressionsOfType(node.value);
      expressions.push(...chunk);
    }
    if (node.type === AST_NODE_TYPES$1.SpreadElement) {
      const chunk = boundGetNestedExpressionsOfType(node.argument);
      expressions.push(...chunk);
    }
    if (node.type === AST_NODE_TYPES$1.MemberExpression) {
      const chunk = boundGetNestedExpressionsOfType(node.object);
      expressions.push(...chunk);
    }
    if (node.type === AST_NODE_TYPES$1.UnaryExpression) {
      const chunk = boundGetNestedExpressionsOfType(node.argument);
      expressions.push(...chunk);
    }
    if (node.type === AST_NODE_TYPES$1.ChainExpression) {
      const chunk = boundGetNestedExpressionsOfType(node.expression);
      expressions.push(...chunk);
    }
    if (node.type === AST_NODE_TYPES$1.TSNonNullExpression) {
      const chunk = boundGetNestedExpressionsOfType(node.expression);
      expressions.push(...chunk);
    }
    return expressions;
  };
}

// src/get-nested-call-expressions.ts
var getNestedCallExpressions = getNestedExpressionsOfType(AST_NODE_TYPES$1.CallExpression);
function getNestedIdentifiers(node) {
  const identifiers = [];
  if (node.type === AST_NODE_TYPES.Identifier) {
    identifiers.push(node);
  }
  if ("arguments" in node) {
    const chunk = node.arguments.map(getNestedIdentifiers).flat(1);
    identifiers.push(...chunk);
  }
  if ("elements" in node) {
    const chunk = node.elements.filter((x) => x !== null).map(getNestedIdentifiers).flat(1);
    identifiers.push(...chunk);
  }
  if ("properties" in node) {
    const chunk = node.properties.map(getNestedIdentifiers).flat(1);
    identifiers.push(...chunk);
  }
  if ("expressions" in node) {
    const chunk = node.expressions.map(getNestedIdentifiers).flat(1);
    identifiers.push(...chunk);
  }
  if ("left" in node) {
    const chunk = getNestedIdentifiers(node.left);
    identifiers.push(...chunk);
  }
  if ("right" in node) {
    const chunk = getNestedIdentifiers(node.right);
    identifiers.push(...chunk);
  }
  if (node.type === AST_NODE_TYPES.Property) {
    const chunk = getNestedIdentifiers(node.value);
    identifiers.push(...chunk);
  }
  if (node.type === AST_NODE_TYPES.SpreadElement) {
    const chunk = getNestedIdentifiers(node.argument);
    identifiers.push(...chunk);
  }
  if (node.type === AST_NODE_TYPES.MemberExpression) {
    const chunk = getNestedIdentifiers(node.object);
    identifiers.push(...chunk);
  }
  if (node.type === AST_NODE_TYPES.UnaryExpression) {
    const chunk = getNestedIdentifiers(node.argument);
    identifiers.push(...chunk);
  }
  if (node.type === AST_NODE_TYPES.ChainExpression) {
    const chunk = getNestedIdentifiers(node.expression);
    identifiers.push(...chunk);
  }
  if (node.type === AST_NODE_TYPES.TSNonNullExpression) {
    const chunk = getNestedIdentifiers(node.expression);
    identifiers.push(...chunk);
  }
  return identifiers;
}
var getNestedNewExpressions = getNestedExpressionsOfType(AST_NODE_TYPES$1.NewExpression);
var traverseUpGuard = F.dual(2, (node, predicate) => {
  const { parent } = node;
  if (!parent || parent.type === AST_NODE_TYPES.Program) return O.none();
  return predicate(parent) ? O.some(parent) : traverseUpGuard(parent, predicate);
});

// src/get-nested-return-statements.ts
function getNestedReturnStatements(node) {
  const returnStatements = [];
  const functionNode = isFunction(node) ? node : O.getOrNull(traverseUpGuard(node, isFunction));
  simpleTraverse(node, {
    enter(node2) {
      if (node2.type !== AST_NODE_TYPES.ReturnStatement) return;
      const parentFunction = O.getOrNull(traverseUpGuard(node2, isFunction));
      if (parentFunction !== functionNode) return;
      returnStatements.push(node2);
    }
  });
  return returnStatements;
}
function getTopLevelIdentifier(node) {
  switch (node.type) {
    case AST_NODE_TYPES.Identifier:
      return O.some(node);
    case AST_NODE_TYPES.MemberExpression:
      return getTopLevelIdentifier(node.object);
    default:
      return O.none();
  }
}
function isEmptyFunction(node) {
  return node.body.type === AST_NODE_TYPES.BlockStatement && node.body.body.length === 0;
}
var isFunctionOfClassMethod = isMatching({
  type: P.union([AST_NODE_TYPES.FunctionExpression, AST_NODE_TYPES.ArrowFunctionExpression]),
  parent: {
    type: AST_NODE_TYPES.MethodDefinition,
    parent: {
      type: AST_NODE_TYPES.ClassBody
    }
  }
});
var isFunctionOfClassProperty = isMatching({
  type: P.union([AST_NODE_TYPES.FunctionExpression, AST_NODE_TYPES.ArrowFunctionExpression]),
  parent: {
    type: AST_NODE_TYPES.Property,
    parent: {
      type: AST_NODE_TYPES.ClassBody
    }
  }
});
function isFunctionOfImmediatelyInvoked(node) {
  return node.type !== AST_NODE_TYPES.FunctionDeclaration && node.parent.type === AST_NODE_TYPES.CallExpression && node.parent.callee === node;
}
var isFunctionOfObjectMethod = isMatching({
  type: P.union([AST_NODE_TYPES.FunctionExpression, AST_NODE_TYPES.ArrowFunctionExpression]),
  parent: {
    type: AST_NODE_TYPES.Property,
    parent: {
      type: AST_NODE_TYPES.ObjectExpression
    }
  }
});
function isKeyLiteralLike(node, property) {
  return match(property).with({ type: AST_NODE_TYPES.Literal }, F.constTrue).with({ type: AST_NODE_TYPES.TemplateLiteral, expressions: [] }, F.constTrue).with({ type: AST_NODE_TYPES.Identifier }, () => !node.computed).otherwise(F.constFalse);
}
function isMapCallLoose(node) {
  if (node.type !== AST_NODE_TYPES.CallExpression) return false;
  if (node.callee.type !== AST_NODE_TYPES.MemberExpression) return false;
  if (node.callee.property.type !== AST_NODE_TYPES.Identifier) return false;
  const { name } = node.callee.property;
  return name === "map" || name.endsWith("Map");
}

// src/is-multi-line.ts
function isMultiLine(node) {
  return node.loc.start.line !== node.loc.end.line;
}
var isNodeEqual = F.dual(2, (a, b) => {
  if (a.type !== b.type) return false;
  if (a.type === AST_NODE_TYPES.ThisExpression && b.type === AST_NODE_TYPES.ThisExpression) return true;
  if (a.type === AST_NODE_TYPES.Literal && b.type === AST_NODE_TYPES.Literal) return a.value === b.value;
  if (a.type === AST_NODE_TYPES.TemplateElement && b.type === AST_NODE_TYPES.TemplateElement) {
    return a.value.raw === b.value.raw;
  }
  if (a.type === AST_NODE_TYPES.TemplateLiteral && b.type === AST_NODE_TYPES.TemplateLiteral) {
    if (a.quasis.length !== b.quasis.length || a.expressions.length !== b.expressions.length) return false;
    if (!zip(a.quasis, b.quasis).every(([a2, b2]) => isNodeEqual(a2, b2))) return false;
    if (!zip(a.expressions, b.expressions).every(([a2, b2]) => isNodeEqual(a2, b2))) return false;
    return true;
  }
  if (a.type === AST_NODE_TYPES.Identifier && b.type === AST_NODE_TYPES.Identifier) return a.name === b.name;
  if (a.type === AST_NODE_TYPES.PrivateIdentifier && b.type === AST_NODE_TYPES.PrivateIdentifier) {
    return a.name === b.name;
  }
  if (a.type === AST_NODE_TYPES.MemberExpression && b.type === AST_NODE_TYPES.MemberExpression) {
    return isNodeEqual(a.property, b.property) && isNodeEqual(a.object, b.object);
  }
  return false;
});
function isRegExpLiteral(node) {
  return node.type === AST_NODE_TYPES.Literal && "regex" in node;
}
function isStringLiteral(node) {
  return node.type === AST_NODE_TYPES.Literal && isString(node.value);
}
function isThisExpression(node) {
  if (node.type === AST_NODE_TYPES.TSAsExpression) {
    return isThisExpression(node.expression);
  }
  return node.type === AST_NODE_TYPES.ThisExpression;
}
function toReadableNodeName(node, getText) {
  switch (node.type) {
    case AST_NODE_TYPES.CallExpression:
      return toReadableNodeName(node.callee, getText);
    case AST_NODE_TYPES.Identifier:
      return node.name;
    case AST_NODE_TYPES.JSXIdentifier:
      return `<${node.name}>`;
    case AST_NODE_TYPES.JSXMemberExpression:
      return `${toReadableNodeName(node.object, getText)}.${toReadableNodeName(node.property, getText)}`;
    case AST_NODE_TYPES.JSXNamespacedName:
      return `${node.namespace.name}:${node.name.name}`;
    case AST_NODE_TYPES.JSXText:
      return node.value;
    case AST_NODE_TYPES.Literal:
      return node.raw;
    case AST_NODE_TYPES.MemberExpression:
      return `${toReadableNodeName(node.object, getText)}.${toReadableNodeName(node.property, getText)}`;
    default:
      return getText(node);
  }
}
function toReadableNodeType(node) {
  if (node.type === AST_NODE_TYPES.Literal) {
    if ("regex" in node) return "RegExp literal";
    return `${getLiteralValueType(node.value)} literal`;
  }
  if (isJSX(node)) return `JSX ${toLowerCase(delimiterCase(replace(node.type, "JSX", ""), " "))}`;
  return toLowerCase(delimiterCase(node.type, " "));
}
var traverseUp = F.dual(2, (node, predicate) => {
  const { parent } = node;
  if (!parent || parent.type === AST_NODE_TYPES.Program) return O.none();
  return predicate(parent) ? O.some(parent) : traverseUp(parent, predicate);
});

export { getClassIdentifier, getFunctionIdentifier, getFunctionInitPath, getIdentifiersFromBinaryExpression, getLiteralValueType, getNestedCallExpressions, getNestedIdentifiers, getNestedNewExpressions, getNestedReturnStatements, getTopLevelIdentifier, hasCallInFunctionInitPath, is, isArrayTupleType, isClass, isConditional, isControlFlow, isDestructuringPattern, isEmptyFunction, isFunction, isFunctionOfClassMethod, isFunctionOfClassProperty, isFunctionOfImmediatelyInvoked, isFunctionOfObjectMethod, isFunctionType, isJSX, isJSXElement, isJSXFragment, isJSXTagNameExpression, isKeyLiteralLike, isLeftHandSideExpression, isLeftHandSideExpressionType, isLoop, isMapCallLoose, isMultiLine, isNodeEqual, isOneOf, isProperty, isRegExpLiteral, isStringLiteral, isThisExpression, isTypeDeclaration, toReadableNodeName, toReadableNodeType, traverseUp, traverseUpGuard };
